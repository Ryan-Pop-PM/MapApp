/*
 * wallaby-core - v1.0.1620
 * https://wallabyjs.com
 * Copyright (c) 2014-2024 Wallaby.js - All Rights Reserved.
 *
 * This source code file is a part of wallaby-core and is a proprietary (closed source) software.

 * IMPORTANT:
 * Wallaby.js is a tool made by software developers for software developers with passion and love for what we do.
 * Pirating the tool is not only illegal and just morally wrong,
 * it is also unfair to other fellow programmers who are using it legally,
 * and very harmful for the tool and its future.
 */
const path=require("path"),url=require("url"),fs=require("fs"),semver=require("semver"),{fork}=require("child_process"),tracer=global.$_$tracer,_=global._,utils=tracer._utils;let testRunContext;const globalContext={entryFilePath:void 0,childFilePath:void 0,vmFilePath:void 0,externalModulesExecutorPath:void 0,vendorEntryFilePath:void 0,collectedFilePath:void 0,esmHooksPath:void 0,runtimeChainPath:void 0,snapshotStatePath:void 0,utilsErrorsPath:void 0,viteNodeUtils:void 0,viteNodeSourceMap:void 0,vitestDistLoader:void 0,vitestEnvironmentPath:void 0,ctx:void 0,initializationFailedMessage:"",localProjectRoot:path.dirname(global.wallaby._localNodeModules),originalCacheRoot:global.wallaby._originalCacheRoot,normalizedLocalProjectDir:utils.normalizePath(path.dirname(global.wallaby._localNodeModules)),normalizedProjectCacheDir:utils.normalizePath(global.wallaby._originalCacheRoot),normalizedRootPrefix:void 0,tinyPool:void 0,abortSignal:void 0,globalSetup:!1,previousTimeStamps:{},runningPromise:Promise.resolve(),fileProjectMap:void 0,vitestVersion:"0.0.0"},isWindows=(utils.patchModule("@rollup/pluginutils",t=>{t=t("@rollup/pluginutils");const o=t.createFilter;return t.createFilter=function(){const e=o.apply(this,arguments);return t=>("string"==typeof t&&(t=global.$_$wallabyVitest.sanitizeFilePath(t)),e(t))},t}),utils.patchModulesCode([{files:["vite-plugin-solid/dist/cjs/index.cjs"],replacements:[{from:"function getExtension(filename) {",to:"function getExtension(filename) { filename = global.$_$wallabyVitest.sanitizeFilePath(filename);"},{from:"async transform(source, id, transformOptions) {",to:"async transform(source, id, transformOptions) { id = global.$_$wallabyVitest.sanitizeFilePath(id);"}]},{files:["vite-plugin-html/dist/index.mjs"],replacements:[{from:"consola.wrapConsole();",to:""}]},{files:["vite-plugin-html/dist/index.cjs"],replacements:[{from:"consola__default.wrapConsole();",to:""}]},{files:["@rollup/pluginutils/dist/cjs/index.js"],replacements:[{from:"return function result(id) {",to:"return function result(id) { id = global.$_$wallabyVitest.sanitizeFilePath(id);"}]}]),utils.patchModulesCode([{files:["vite-plugin-vue-type-imports/dist/index.js"],replacements:[{from:"if(!/\\.(vue)$/.test(p))",to:"if(!/\\.(vue)$/.test(global.$_$wallabyVitest.sanitizeFilePath(p)))"}]}],"Possibly unsupported version of 'vite-plugin-vue-type-imports'"),utils.patchModulesCode([{files:["unplugin-swc/dist/index.js"],replacements:[{from:"async transform(code, id) {",to:"async transform(code, id) { id = global.$_$wallabyVitest.sanitizeFilePath(id);"}]}],"Possibly unsupported version of 'unplugin-swc'"),"win32"===process.platform);function normalizeModuleId(t){return t.replace(/\\/g,"/").replace(/^\/@fs\//,isWindows?"":"/").replace(/^file:\//,"/").replace(/^node:/,"").replace(/^\/+/,"/")}function getFileData(t){t=global.$_$wallabyVitest.sanitizeFilePath(t);let e=utils.normalizePath(t).replace(globalContext.normalizedLocalProjectDir,"").replace(globalContext.normalizedProjectCacheDir,""),o=("/"===e[0]&&(e=e.substr(1)),tracer._filePathToFileData[e]);return o=!o&&globalContext.normalizedRootPrefix?tracer._filePathToFileData[globalContext.normalizedRootPrefix+e]:o}function wrapFetchedModule(e,o,t,a){e=normalizeModuleId(e);var l=`${(null==(l=null==t?void 0:t.config)?void 0:l.root)||""}:`,l=l+e;if(testRunContext.fetchedModules.has(l))return testRunContext.fetchedModules.get(l);var s=getFileData(e);if(!a&&!s&&e.startsWith("/")&&null!=(a=null==t?void 0:t.config)&&a.root)return wrapFetchedModule(e=path.join(t.config.root,e.substr(1)),o,t,!0);if(s&&s.instrument&&testRunContext.instrumentedFiles.has(s.id)){a=testRunContext.instrumentedFiles.get(s.id),e=(delete o.map,tracer.sendTransformedFile(a),a.instrumented.numberOfFunctions!==s.numberOfFunctions&&delete a.instrumented.testName,{id:s.id,ranges:a.instrumented.ranges.length});let t;!s.test||global.$_$traceContext&&global.$_$traceContext.test||((t={name:s.allowedToRunSingleTestOnly&&a.instrumented.testName}).name?("*"===global.$_$tests&&(global.$_$tests={}),(global.$_$tests[":?"]=global.$_$tests[":?"]||{})[":"+t.name]="*"):global.$_$tests&&global.$_$tests[":?"]&&(global.$_$tests="*")),o=Object.assign(Object.assign({},o),{coverage:e,filter:t}),testRunContext.fetchedModules.set(l,o)}return o}const wallabyWorkerMessageProcessors={receiverMessage(t){tracer._receiver.send(t)},receiverHighPriorityMessage(t){tracer._receiver.send(t)},uncaughtException(t){tracer.reportGlobalError(t)},profile(t){global.$_$tracer._profileResult=t},inlineSnapshotSaved(t){var e,o=getFileData(t.fileName);o&&(e=o.inOriginalFilesCache?path.join(globalContext.originalCacheRoot,o.path):t.fileName,e=fs.readFileSync(e).toString(),t=t.content,tracer.sendFileChange({id:o.id,oldContent:e,newContent:t}))},specFileTests(t){testRunContext.specFileTests=t},log(t){console.log(t)},debugLog(t){tracer.debugLog(t)},complete(t){testRunContext&&testRunContext.esmWarnings.push(...t.esmWarnings)}};async function initializeVitest(){if(!globalContext.ctx){process.env.VITE_CJS_IGNORE_WARNING=!0;const vitestPackage=utils.tryRequireModuleWithPathFrom(globalContext.localProjectRoot,"vitest/package.json",!1);if(!vitestPackage)throw new Error("Vitest dependency not found.");globalContext.esmHooksPath=path.join(path.dirname(process.mainModule.filename),"runners/node/hooks.mjs");const esmHooks=globalContext.esmHooks=await eval(`import('${url.pathToFileURL(globalContext.esmHooksPath)}')`),vitestDist=(esmHooks.registerHook(),globalContext.vitestVersion=vitestPackage.module.version,path.join(path.dirname(vitestPackage.path),"dist")),requiredDependencyPnpmMessage=t=>`Required dependency '${t}' not found. If you are using pnpm, please refer to our docs: (https://wallabyjs.com/docs/integration/vitest.html#using-pnpm)`,viteNodePackage=utils.tryRequireModuleWithPathFrom(path.dirname(vitestPackage.path),"vite-node",!1);if(!viteNodePackage&&semver.gte(vitestPackage.module.version,"0.26.0"))throw new Error(requiredDependencyPnpmMessage("vite-node"));const viteNodeDist=viteNodePackage?path.dirname(viteNodePackage.path):vitestDist,vitestRunnerPackage=utils.tryRequireModuleWithPathFrom(globalContext.localProjectRoot,"@vitest/runner/package.json",!1);if(!vitestRunnerPackage&&semver.gte(vitestPackage.module.version,"0.28.0"))throw new Error(requiredDependencyPnpmMessage("@vitest/runner"));const vitestRunnerDist=vitestRunnerPackage?path.join(path.dirname(vitestRunnerPackage.path),"dist"):vitestDist,vitestSnapshotPackage=utils.tryRequireModuleWithPathFrom(globalContext.localProjectRoot,"@vitest/snapshot/package.json",!1);if(!vitestSnapshotPackage&&semver.gte(vitestPackage.module.version,"0.30.0"))throw new Error(requiredDependencyPnpmMessage("@vitest/snapshot"));const vitestSnapshotDist=vitestSnapshotPackage?path.join(path.dirname(vitestSnapshotPackage.path),"dist"):vitestDist,vitestUtilsPackage=utils.tryRequireModuleWithPathFrom(globalContext.localProjectRoot,"@vitest/utils/package.json",!1),createMethodsRpcPath=(vitestUtilsPackage&&(globalContext.utilsErrorsPath=utils.findFirstFileMatchingContentInDirectory(path.join(path.dirname(vitestUtilsPackage.path),"dist"),"err.expected = stringify(err.expected, 10);"),globalContext.utilsErrorsPath)&&esmHooks.patchFile(globalContext.utilsErrorsPath,[{from:"err.expected = stringify(err.expected, 10);",to:"err.expected = global.$_$wallabyVitest.inspect(err.expected);",warn:!0},{from:"err.actual = stringify(err.actual, 10);",to:"err.actual = global.$_$wallabyVitest.inspect(err.actual);",warn:!0}]),utils.findFirstFileMatchingContentInDirectory(vitestDist,"function createMethodsRPC(")),createVitestFileToPatchFileName=utils.findFirstFileMatchingContentInDirectory(vitestDist,"const ctx = await createVitest(options, viteOverrides);")||utils.findFirstFileMatchingContentInDirectory(vitestDist,"const ctx = await createVitest(mode, options, viteOverrides);")||utils.findFirstFileMatchingContentInDirectory(vitestDist,"const ctx = await createVitest(mode, options, viteOverrides, vitestOptions);");if(!createVitestFileToPatchFileName)throw new Error("Could not find vitest entry point.");const transformRequestIdFileName=utils.findFirstFileMatchingContentInDirectory(viteNodeDist,"async _transformRequest(id, filepath, transformMode) {")||utils.findFirstFileMatchingContentInDirectory(viteNodeDist,"async _transformRequest(id, filepath, customTransformMode) {")||utils.findFirstFileMatchingContentInDirectory(viteNodeDist,"async _transformRequest(id, customTransformMode) {")||utils.findFirstFileMatchingContentInDirectory(viteNodeDist,"async _transformRequest(id) {")||createVitestFileToPatchFileName;if(globalContext.vitestDistLoader=path.join(path.dirname(vitestPackage.path),"dist","loader.js"),fs.existsSync(globalContext.vitestDistLoader)||(globalContext.vitestDistLoader=path.join(path.dirname(vitestPackage.path),"dist","loader.mjs")),globalContext.viteNodeUtils=utils.findFirstFileMatchingContentInDirectory(viteNodeDist,"{ code: transformed, externalize } = await this.options.fetchModule("),!globalContext.viteNodeUtils&&(globalContext.viteNodeUtils=utils.findFirstFileMatchingContentInDirectory(vitestDist,"{ code: transformed, externalize } = await this.options.fetchModule("),!globalContext.viteNodeUtils))throw new Error("Could not find vitest utils");if(esmHooks.patchFile(globalContext.viteNodeUtils,[{key:"fetchModule",from:"{ code: transformed, externalize } = await this.options.fetchModule(id);",to:"{ code: transformed, externalize } = global.$_$wallabyVitest.wrapFetchedModule(id, await this.options.fetchModule(id));"},{key:"fetchModule",from:"{ code: transformed, externalize } = await this.options.fetchModule(resolvedId || dep);",to:"{ code: transformed, externalize } = global.$_$wallabyVitest.wrapFetchedModule(resolvedId || dep, await this.options.fetchModule(id));"}]),globalContext.viteNodeSourceMap=path.join(viteNodeDist,"source-map.mjs"),globalContext.vendorEntryFilePath=utils.findFirstFileMatchingContentInDirectory(vitestRunnerDist,"function updateTask(task"),!globalContext.vendorEntryFilePath)throw new Error("Could not find vendor entry.");if(esmHooks.patchFile(globalContext.vendorEntryFilePath,[{from:"async function collectTests(paths, runner) {",to:"async function collectTests(paths, runner) { const result = await collectTestsPatched(paths, runner); global.$_$wallabyVitest.adjustFileTasks(result); return result; } async function collectTestsPatched(paths, runner) {"},{key:"updateTask",from:"function updateTask(task) {",to:"function updateTask(task) { global.$_$wallabyVitest.updateTask(task); "},{key:"updateTask",from:"function updateTask(task, runner) {",to:"function updateTask(task, runner) { global.$_$wallabyVitest.updateTask(task); "},{key:"getFn",from:"await getFn(test)();",to:"await global.$_$wallabyVitest.getFn(test); await getFn(test)();"},{key:"getFn",from:"const fn = getFn(test);",to:"await global.$_$wallabyVitest.getFn(test); const fn = getFn(test);"},{key:"runSuite",from:"await runSuite(file);",to:"global.$_$wallabyVitest.runSuite(file); await runSuite(file);"},{key:"runSuite",from:"await runSuite(file, runner);",to:"global.$_$wallabyVitest.runSuite(file); await runSuite(file, runner);"}]),globalContext.collectedFilePath=utils.findFirstFileMatchingContentInDirectory(vitestRunnerDist,"rpc().onCollected(files)")||globalContext.vendorEntryFilePath,esmHooks.patchFile(globalContext.collectedFilePath,[{key:"collected",from:"rpc().onCollected(files);",to:"rpc().onCollected(files, global.$_$session);"},{key:"collected",from:"rpc().onCollected(files);",to:"rpc().onCollected(files, global.$_$session);"},{key:"collected",from:"(_b = runner.onCollected) == null ? void 0 : _b.call(runner, files)",to:"(_b = runner.onCollected) == null ? void 0 : _b.call(runner, files, global.$_$session)"}]),globalContext.entryFilePath=utils.findFirstFileMatchingContentInDirectory(vitestDist,"function setupGlobalEnv(config)")||utils.findFirstFileMatchingContentInDirectory(vitestDist,"function setupGlobalEnv(config, { environment })"),globalContext.childFilePath=utils.findFirstFileMatchingContentInDirectory(vitestDist,'process.env.VITEST_WORKER_ID = "1";'),globalContext.childFilePath&&esmHooks.patchFile(globalContext.childFilePath,[{key:"processExit",from:"procesExit();",to:"await global.$_$wallabyVitest.processExit(); procesExit();"},{key:"run",from:"async function run(ctx) {",to:"async function run(ctx) { try { return await runInternal(ctx); } catch (e) { await global.$_$wallabyVitest.unhandledError(e); } } async function runInternal(ctx) {"}]),globalContext.vmFilePath=utils.findFirstFileMatchingContentInDirectory(vitestDist,'const entryFile = pathToFileURL(resolve(distDir, "entry-vm.js")).href;')||utils.findFirstFileMatchingContentInDirectory(vitestDist,'const entryFile = pathToFileURL(resolve(distDir, "workers/runVmTests.js")).href;'),globalContext.vmFilePath&&esmHooks.patchFile(globalContext.vmFilePath,[{key:"state",from:"context.__vitest_worker__ = state;",to:"context.__vitest_worker__ = state; globalThis.__vitest_worker__ = context.__vitest_worker__;"},{key:"state",from:"context.global = context;",to:"context.global = context; globalThis.__vitest_worker__ = context.__vitest_worker__;"}]),globalContext.externalModulesExecutorPath=utils.findFirstFileMatchingContentInDirectory(vitestDist,"class ExternalModulesExecutor {"),globalContext.externalModulesExecutorPath&&esmHooks.patchFile(globalContext.externalModulesExecutorPath,[{from:'const source = readFileSync(path, "utf-8");',to:'const source = global.$_$wallabyVitest.patchReadFileSync(path, readFileSync(path, "utf-8"));'}]),globalContext.runtimeChainPath=utils.findFirstFileMatchingContentInDirectory(vitestDist,"// Vitest Snapshot v"),!globalContext.runtimeChainPath)throw new Error("Could not find runtime chain file.");globalContext.snapshotStatePath=utils.findFirstFileMatchingContentInDirectory(vitestSnapshotDist,"class SnapshotState {")||globalContext.runtimeChainPath,globalContext.snapshotStatePath&&esmHooks.patchFile(globalContext.snapshotStatePath,[{key:"inlineSnapshotSaved",from:'await promises.writeFile(file, transformed, "utf-8");',to:"global.$_$wallabyVitest.inlineSnapshotSaved(file, transformed)",warn:!0},{key:"inlineSnapshotSaved",from:"await environment.saveSnapshotFile(file, transformed);",to:"global.$_$wallabyVitest.inlineSnapshotSaved(file, transformed)",warn:!0},{from:'if (hasSnapshot && this._updateSnapshot === "all" || ',to:'global.$_$tracer._matchSnapshot({ key, snapshotPath: this.snapshotPath }); if (hasSnapshot && this._updateSnapshot === "all" || ',warn:!0},{from:"this._updateSnapshot = options.updateSnapshot;",to:"this._updateSnapshot = global.$_$wallabyVitest.updateSnapshot();",warn:!0},{from:'if (this._updateSnapshot === "all" && this._uncheckedKeys.size) {',to:'if ((global.$_$wallabyVitest.canUpdateSnapshot(this)) && this._updateSnapshot === "all" && this._uncheckedKeys.size) {',warn:!0},{from:'if (hasSnapshot && this._updateSnapshot === "all" || (!hasSnapshot || !snapshotIsPersisted) && (this._updateSnapshot === "new" || this._updateSnapshot === "all")) {',to:'if ((global.$_$wallabyVitest.canUpdateSnapshot(this)) && ((hasSnapshot && this._updateSnapshot === "all" || (!hasSnapshot || !snapshotIsPersisted) && (this._updateSnapshot === "new" || this._updateSnapshot === "all")))) {',warn:!0},{from:"this.snapshotState = this.getSnapshotState(test);",to:"this.snapshotState = this.getSnapshotState(test); global.$_$wallabyVitest.getSnapshotState(this);",key:"getSnapshotState",warn:!0},{from:"this.snapshotState = this.getSnapshotState(filepath);",to:"this.snapshotState = this.getSnapshotState(filepath); global.$_$wallabyVitest.getSnapshotState(this);",key:"getSnapshotState",warn:!0}]),globalContext.vitestEnvironmentPath=utils.findFirstFileMatchingContentInDirectory(vitestDist,"return dom.getInternalVMContext();"),globalContext.vitestEnvironmentPath&&esmHooks.patchFile(globalContext.vitestEnvironmentPath,[{from:"return dom.getInternalVMContext();",to:"global.$_$wallabyVitest.ensureDomGlobals(dom); return dom.getInternalVMContext();"}]);const rollupPluginUtils=utils.tryRequireModuleWithPathFrom(globalContext.localProjectRoot,"@rollup/pluginutils",!1);if(rollupPluginUtils&&rollupPluginUtils.path.endsWith("@rollup/pluginutils/dist/cjs/index.js".replace(/\//g,path.sep))){const rollupPluginEsPath=path.join(path.dirname(path.dirname(rollupPluginUtils.path)),"es","index.js");esmHooks.patchFile(rollupPluginEsPath,[{from:"return function result(id) {",to:"return function result(id) { id = global.$_$wallabyVitest.sanitizeFilePath(id);",optional:!0}])}const unpluginSwc=utils.tryRequireModuleWithPathFrom(globalContext.localProjectRoot,"unplugin-swc",!1);if(unpluginSwc){const unpluginSwcEsPath=unpluginSwc.path.endsWith("unplugin-swc/dist/index.js".replace(/\//g,path.sep))?path.join(path.dirname(unpluginSwc.path),"index.mjs"):unpluginSwc.path.endsWith("unplugin-swc/dist/index.cjs".replace(/\//g,path.sep))?path.join(path.dirname(unpluginSwc.path),"index.js"):"";unpluginSwcEsPath&&esmHooks.patchFile(unpluginSwcEsPath,[{from:"async transform(code, id) {",to:"async transform(code, id) { id = global.$_$wallabyVitest.sanitizeFilePath(id);",optional:!0}])}const nuxt=utils.tryRequireModuleWithPathFrom(globalContext.localProjectRoot,"nuxt/package.json",!1);if(nuxt){const nuxtPath=path.join(path.dirname(nuxt.path),"dist","index.mjs");esmHooks.patchFile(nuxtPath,[{from:"function isVue(id, opts = {}) {",to:"function isVue(id, opts = {}) { id = global.$_$wallabyVitest.sanitizeFilePath(id);",optional:!0}])}const solidJsPlugin=utils.tryRequireModuleWithPathFrom(globalContext.localProjectRoot,"vite-plugin-solid",!1);if(solidJsPlugin&&solidJsPlugin.path.endsWith("vite-plugin-solid/dist/cjs/index.cjs".replace(/\//g,path.sep))){const solidJsPluginEsPath=path.join(path.dirname(path.dirname(solidJsPlugin.path)),"esm","index.mjs");esmHooks.patchFile(solidJsPluginEsPath,[{from:"async transform(source, id, transformOptions) {",to:"async transform(source, id, transformOptions) { id = global.$_$wallabyVitest.sanitizeFilePath(id);",optional:!0}])}esmHooks.patchFile(globalContext.viteNodeSourceMap,[{from:'if (map.mappings.startsWith(";"))',to:'if (false && map.mappings.startsWith(";"))',optional:!0}]),esmHooks.patchFile(transformRequestIdFileName,[{key:"transformRequest",from:"async _transformRequest(id) {",to:"async _transformRequest(id) { return await global.$_$wallabyVitest.transformRequest(id, undefined, undefined, this); } async _wallabyTransformRequest(id) { id = global.$_$wallabyVitest.adjustTransformRequestId(id);"},{key:"transformRequest",from:"async _transformRequest(id, customTransformMode) {",to:"async _transformRequest(id, customTransformMode) { return await global.$_$wallabyVitest.transformRequest(id, undefined, customTransformMode, this); } async _wallabyTransformRequest(id, customTransformMode) { id = global.$_$wallabyVitest.adjustTransformRequestId(id);"},{key:"transformRequest",from:"async _transformRequest(id, filepath, customTransformMode) {",to:"async _transformRequest(id, filepath, customTransformMode) { return await global.$_$wallabyVitest.transformRequest(id, filepath, customTransformMode, this); } async _wallabyTransformRequest(id, filepath, customTransformMode) { id = global.$_$wallabyVitest.adjustTransformRequestId(id);"},{key:"transformRequest",from:"async _transformRequest(id, filepath, transformMode) {",to:"async _transformRequest(id, filepath, transformMode) { return await global.$_$wallabyVitest.transformRequest(id, filepath, transformMode, this); } async _wallabyTransformRequest(id, filepath, transformMode) { id = global.$_$wallabyVitest.adjustTransformRequestId(id);"},{key:"mockProcessing",from:'if (sourcemap === "inline" && result ',to:'if (result && result._wallabyProcessed) { return result; } if (sourcemap === "inline" && result '},{key:"_fetchModule",from:"const timestamp = moduleNode ? Math.max(moduleNode.lastHMRTimestamp, moduleNode.lastInvalidationTimestamp) : 0;",to:"const timestamp = global.$_$wallabyVitest.getFileTimestamp(id) || (moduleNode ? Math.max(moduleNode.lastHMRTimestamp, moduleNode.lastInvalidationTimestamp) : 0);",optional:!0}]);const createMethodsRpcPatches=[{key:"fetchModule",from:"const result = await project.vitenode.fetchResult(id, transformMode).catch(handleRollupError);",to:"return global.$_$wallabyVitest.fetchModule(id, transformMode, project, 'fetchResult');"},{key:"fetchModule",from:"return ctx.vitenode.fetchModule(id);",to:"return global.$_$wallabyVitest.fetchModule(id, undefined, ctx, 'fetchModule');"},{key:"fetchModule",from:"return ctx.vitenode.fetchModule(id, transformMode);",to:"return global.$_$wallabyVitest.fetchModule(id, transformMode, ctx, 'fetchModule');"},{key:"fetchModule",from:"return project.vitenode.fetchModule(id, transformMode);",to:"return global.$_$wallabyVitest.fetchModule(id, transformMode, project, 'fetchModule');"},{key:"fetchModule",from:"const result = await project.vitenode.fetchResult(id, transformMode);",to:"return global.$_$wallabyVitest.fetchModule(id, transformMode, project, 'fetchResult');"},{from:"const pool = new Tinypool(options);",to:"const pool = global.$_$wallabyVitest.wrapTinyPoolResult(new Tinypool(global.$_$wallabyVitest.tinyPoolOptions(options)));"},{from:"const pool = new Tinypool(options);",to:"const pool = global.$_$wallabyVitest.wrapTinyPoolResult(new Tinypool(global.$_$wallabyVitest.tinyPoolOptions(options)));",optional:!0},{from:"await pool.run(data, { transferList: [workerPort], name });",to:"global.$_$wallabyVitest.runResult(await pool.run({ workerPath: options.originalFilename, ...data, ...global.$_$wallabyVitest.generateWorkerContext() }, { transferList: [workerPort], name, signal: global.$_$wallabyVitest.abortSignal() }));"},{from:"await pool.run(data, { transferList: [workerPort], name });",to:"global.$_$wallabyVitest.runResult(await pool.run({ workerPath: options.originalFilename, ...data, ...global.$_$wallabyVitest.generateWorkerContext() }, { transferList: [workerPort], name, signal: global.$_$wallabyVitest.abortSignal() }));",optional:!0}],createVitestFileToPatches=[{key:"createVitest",from:"const ctx = await createVitest(options, viteOverrides);",to:"const ctx = await createVitest(global.$_$wallabyVitest.adjustCreateVitestOptions(options), viteOverrides); global.$_$wallabyVitest.adjustCtxAfterCreateVitest(ctx);"},{key:"createVitest",from:"const ctx = await createVitest(mode, options, viteOverrides);",to:"const ctx = await createVitest(mode, global.$_$wallabyVitest.adjustCreateVitestOptions(options), viteOverrides); global.$_$wallabyVitest.adjustCtxAfterCreateVitest(ctx);"},{key:"createVitest",from:"const ctx = await createVitest(mode, options, viteOverrides, vitestOptions);",to:"const ctx = await createVitest(mode, global.$_$wallabyVitest.adjustCreateVitestOptions(options), viteOverrides, vitestOptions); global.$_$wallabyVitest.adjustCtxAfterCreateVitest(ctx);"},{key:"startVitest",from:"async function startVitest(cliFilters, options, viteOverrides) {",to:"export async function startVitest(cliFilters, options, viteOverrides) {"},{key:"startVitest",from:"async function startVitest(mode, cliFilters, options, viteOverrides) {",to:"export async function startVitest(cliFilters, options, viteOverrides) { let mode = 'test';"},{key:"startVitest",from:"async function startVitest(mode, cliFilters = [], options = {}, viteOverrides) {",to:"export async function startVitest(cliFilters = [], options = {}, viteOverrides) { let mode = 'test';"},{key:"startVitest",from:"async function startVitest(mode, cliFilters = [], options = {}, viteOverrides, vitestOptions) {",to:"export async function startVitest(cliFilters = [], options = {}, viteOverrides, vitestOptions) { let mode = 'test';"},{key:"GlobalSetupPlugin",from:"GlobalSetupPlugin(ctx),",to:"GlobalSetupPlugin(ctx), [...global.$_$wallabyVitest.viteTestPluginAdjustments()],"},{key:"GlobalSetupPlugin",from:"GlobalSetupPlugin(ctx, ctx.logger),",to:"GlobalSetupPlugin(ctx, ctx.logger), [...global.$_$wallabyVitest.viteTestPluginAdjustments()],"},{key:"GlobalSetupPlugin",from:"GlobalSetupPlugin(project, project.ctx.logger),",to:"GlobalSetupPlugin(project, project.ctx.logger), [...global.$_$wallabyVitest.viteTestPluginAdjustments()],"},{key:"globalSetupFiles",from:"globalSetupFiles = await loadGlobalSetupFiles(ctx);",to:"globalSetupFiles = await global.$_$wallabyVitest.loadGlobalSetupFiles(async () => await loadGlobalSetupFiles(ctx));"},{key:"globalSetupFiles",from:"globalSetupFiles = await loadGlobalSetupFiles(project);",to:"globalSetupFiles = await global.$_$wallabyVitest.loadGlobalSetupFiles(async () => await loadGlobalSetupFiles(project));"},{from:"async start(filters) {",to:"async start(filters) { await global.$_$wallabyVitest.start(filters, this); return;"},{from:"await ctx.start(cliFilters);",to:"await ctx.start(cliFilters); return ctx;"},{from:"async report(name, ...args) {",to:"async report(name, ...args) { global.$_$wallabyVitest.report(name, ...args); return;"},{from:"filename: workerPath,",to:"filename: global.$_$wallabyVitest.adjustedWorkerEntryPoint(workerPath), originalFilename: workerPath,",optional:!0},{from:"filename: workerPath$1,",to:"filename: global.$_$wallabyVitest.adjustedWorkerEntryPoint(workerPath$1), originalFilename: workerPath$1,",optional:!0},{from:"const child = fork(childPath,",to:"const child = global.$_$wallabyVitest.forkChildProcess(childPath,",optional:!0},{from:"onCollected(files) {",to:"onCollected(files, sessionId) {"}],dependency=(semver.lt(globalContext.vitestVersion,"2.0.5")&&createMethodsRpcPatches.push({key:"report",from:'ctx.report("onCollected", files);',to:'ctx.report("onCollected", files, sessionId);'},{key:"report",from:'project.report("onCollected", files);',to:'project.report("onCollected", files, sessionId);'}),semver.gte(globalContext.vitestVersion,"1.0.0")&&(createVitestFileToPatches.push({key:"GlobalSetupPlugin",from:"function MocksPlugin() {",to:"function MocksPlugin() { return [...global.$_$wallabyVitest.viteTestPluginAdjustments(), MocksOverridePlugin()] } function MocksOverridePlugin() {"},{key:"globalSetupFiles",from:"this._globalSetups = await loadGlobalSetupFiles(this.runner, this.config.globalSetup);",to:"this._globalSetups = await global.$_$wallabyVitest.loadGlobalSetupFiles(async () => await loadGlobalSetupFiles(this.runner, this.config.globalSetup));"},{from:"filename: vmPath,",to:"filename: global.$_$wallabyVitest.adjustedWorkerEntryPoint(vmPath), originalFilename: vmPath,",optional:!0},{from:"filename: forksPath,",to:"filename: global.$_$wallabyVitest.adjustedWorkerEntryPoint(forksPath), originalFilename: forksPath,",optional:!0}),createMethodsRpcPatches.push({from:"const pool = new Tinypool$1(options);",to:"const pool = global.$_$wallabyVitest.wrapTinyPoolResult(new Tinypool$1(global.$_$wallabyVitest.tinyPoolOptions(options)));"},{from:"const pool = new Tinypool$1(options);",to:"const pool = global.$_$wallabyVitest.wrapTinyPoolResult(new Tinypool$1(global.$_$wallabyVitest.tinyPoolOptions(options)));"},{from:"await pool.run(data, { name, channel });",to:"global.$_$wallabyVitest.runResult(await pool.run({ workerPath: options.originalFilename, ...data, ...global.$_$wallabyVitest.generateWorkerContext() }, { name, channel, signal: global.$_$wallabyVitest.abortSignal() }));",optional:!0},{from:"await pool.run(data, { name, channel });",to:"global.$_$wallabyVitest.runResult(await pool.run({ workerPath: options.originalFilename, ...data, ...global.$_$wallabyVitest.generateWorkerContext() }, { name, channel, signal: global.$_$wallabyVitest.abortSignal() }));",optional:!0})),semver.gte(globalContext.vitestVersion,"2.1.4")?createMethodsRpcPatches.push({from:'filename: resolve$1(ctx.distPath, "worker.js"),',to:'filename: global.$_$wallabyVitest.adjustedWorkerEntryPoint(resolve$1(ctx.distPath, "worker.js")), originalFilename: resolve$1(ctx.distPath, "worker.js"),'},{from:'filename: resolve$1(ctx.distPath, "worker.js"),',to:'filename: global.$_$wallabyVitest.adjustedWorkerEntryPoint(resolve$1(ctx.distPath, "worker.js")), originalFilename: resolve$1(ctx.distPath, "worker.js"),'},{from:'filename: resolve$1(ctx.distPath, "worker.js"),',to:'filename: global.$_$wallabyVitest.adjustedWorkerEntryPoint(resolve$1(ctx.distPath, "worker.js")), originalFilename: resolve$1(ctx.distPath, "worker.js"),'},{from:'filename: resolve$1(ctx.distPath, "worker.js"),',to:'filename: global.$_$wallabyVitest.adjustedWorkerEntryPoint(resolve$1(ctx.distPath, "worker.js")), originalFilename: resolve$1(ctx.distPath, "worker.js"),'}):semver.gte(globalContext.vitestVersion,"1.2.0")&&createMethodsRpcPatches.push({from:'filename: resolve(ctx.distPath, "worker.js"),',to:'filename: global.$_$wallabyVitest.adjustedWorkerEntryPoint(resolve(ctx.distPath, "worker.js")), originalFilename: resolve(ctx.distPath, "worker.js"),'},{from:'filename: resolve(ctx.distPath, "worker.js"),',to:'filename: global.$_$wallabyVitest.adjustedWorkerEntryPoint(resolve(ctx.distPath, "worker.js")), originalFilename: resolve(ctx.distPath, "worker.js"),'},{from:'filename: resolve(ctx.distPath, "worker.js"),',to:'filename: global.$_$wallabyVitest.adjustedWorkerEntryPoint(resolve(ctx.distPath, "worker.js")), originalFilename: resolve(ctx.distPath, "worker.js"),'},{from:'filename: resolve(ctx.distPath, "worker.js"),',to:'filename: global.$_$wallabyVitest.adjustedWorkerEntryPoint(resolve(ctx.distPath, "worker.js")), originalFilename: resolve(ctx.distPath, "worker.js"),'}),semver.gte(globalContext.vitestVersion,"1.2.0")?createMethodsRpcPatches.push({key:"onWallabyWorkerMessage",from:"snapshotSaved(snapshot) {",to:"async onWallabyWorkerMessage(message) { await global.$_$wallabyVitest.wallabyWorkerMessage(message); }, snapshotSaved(snapshot ) {"},{from:"snapshotSaved(snapshot) {",to:"async onWallabyWorkerMessage(message) { await global.$_$wallabyVitest.wallabyWorkerMessage(message); }, snapshotSaved(snapshot) {",optional:!0},{from:"const pool = new Tinypool$1(options);",to:"const pool = global.$_$wallabyVitest.wrapTinyPoolResult(new Tinypool$1(global.$_$wallabyVitest.tinyPoolOptions(options)));"}):createMethodsRpcPatches.push({key:"onWallabyWorkerMessage",from:"onWorkerExit(code) {",to:"async onWallabyWorkerMessage(message) { await global.$_$wallabyVitest.wallabyWorkerMessage(message); }, onWorkerExit(code) {"},{key:"onWallabyWorkerMessage",from:"async onWorkerExit(error, code) {",to:"async onWallabyWorkerMessage(message) { await global.$_$wallabyVitest.wallabyWorkerMessage(message); }, async onWorkerExit(error, code) {"}),semver.gte(globalContext.vitestVersion,"2.0.0")&&createVitestFileToPatches.push({key:"GlobalSetupPlugin",from:"function MocksPlugins(options = {}) {",to:"function MocksPlugins(options = {}) { return [...global.$_$wallabyVitest.viteTestPluginAdjustments(), ...MocksOverridePlugins(options)] } function MocksOverridePlugins(options) {"},{key:"GlobalSetupPlugin",from:"function MocksPlugins() {",to:"function MocksPlugins() { return [...global.$_$wallabyVitest.viteTestPluginAdjustments(), ...MocksOverridePlugins()] } function MocksOverridePlugins() {"},{key:"globalSetupFiles",from:"async function loadGlobalSetupFiles(runner, globalSetup) {",to:"async function loadGlobalSetupFiles(runner, globalSetup) { return await global.$_$wallabyVitest.loadGlobalSetupFiles(async () => await loadGlobalSetupFilesOverride(runner, globalSetup)); } async function loadGlobalSetupFilesOverride(runner, globalSetup) {"}),esmHooks.patchFile(createMethodsRpcPath,createMethodsRpcPatches),esmHooks.patchFile(createVitestFileToPatchFileName,createVitestFileToPatches),await eval(`import('${url.pathToFileURL(createVitestFileToPatchFileName)}')`));if(globalContext.initializationFailed)throw new Error(globalContext.initializationFailed);const options={},root=(global.wallaby._testConfigFile&&(options.config=global.wallaby._testConfigFile),globalContext.ctx=await dependency.startVitest([],options),globalContext.ctx.config.root+(globalContext.ctx.config.root.endsWith("/")?"":"/"));root.startsWith(globalContext.normalizedLocalProjectDir)&&(globalContext.normalizedRootPrefix=root.substring(globalContext.normalizedLocalProjectDir.length+1))}if(globalContext.initializationFailed)throw new Error(globalContext.initializationFailed)}global.$_$wallabyVitest={wrapFetchedModule(t,e){return e},fetchModule(a,t,l,s){return new Promise((e,o)=>{l.vitenode[s](a,t).then(t=>{e(wrapFetchedModule(a,t,l))}).catch(t=>{t instanceof Error&&"plugin"in t?o({name:t.name,message:t.message,stack:t.stack,cause:t.cause,__vitest_rollup_error__:{plugin:t.plugin,id:t.id,loc:t.loc,frame:t.frame}}):o(t)})})},adjustCtxAfterCreateVitest(t){t.config.sourcemap="inline",t.config.coverage.enabled=!1,t.config.watch=!1},adjustCreateVitestOptions(t){return(t=t||{}).watch=!1,t},report(t,e,o){if(!("onFinished"!==t&&"onCollected"!==t||"onCollected"===t&&o&&o!==global.$_$session))for(const a of e)if(a.result&&"fail"===a.result.state&&(a.result.error&&(a.result.error.message&&0===a.result.error.message.indexOf("Failed to instrument")?tracer.reportGlobalError(a.result.error.message):tracer.reportGlobalError(a.result.error)),a.result.errors))for(const l of a.result.errors)l.message&&0===l.message.indexOf("Failed to instrument")?tracer.reportGlobalError(l.message):tracer.reportGlobalError(l)},async start(t,e){try{var o,a,l=await e.filterTestsBySource(await e.globTestFiles(t));globalContext.fileProjectMap=new Map;for([o,a]of l)globalContext.fileProjectMap.set(isWindows?a.replace(/\//g,path.sep):a,o)}catch(t){}},WallabyViteServerPlugin(){return{name:"vitest:wallaby-config",config(){return{server:{fs:{cachedChecks:!1}}}}}},WallabyVitePrePlugin(){return{name:"vitest:wallaby-preprocessing",load(t){t=getFileData(t);if(t&&t.instrument&&t.inOriginalFilesCache)return fs.readFileSync(path.join(globalContext.originalCacheRoot,t.path),"utf8")}}},WallabyVitePostPlugin(){return{name:"vitest:wallaby-postprocessing",enforce:"post",transform(l,e){let s;if(e===globalContext.vendorEntryFilePath?s=[{from:"const hasOnlyTasks",to:"global.$_$wallabyVitest.adjustFileTasks(file); const hasOnlyTasks"},{key:"updateTask",from:"function updateTask(task) {",to:"function updateTask(task) { global.$_$wallabyVitest.updateTask(task); "},{key:"updateTask",from:"function updateTask(task, runner) {",to:"function updateTask(task, runner) { global.$_$wallabyVitest.updateTask(task); "},{key:"getFn",from:"await getFn(test)();",to:"await global.$_$wallabyVitest.getFn(test); await getFn(test)();"},{key:"getFn",from:"const fn = getFn(test);",to:"await global.$_$wallabyVitest.getFn(test); const fn = getFn(test);"},{key:"runSuite",from:"await runSuite(file);",to:"global.$_$wallabyVitest.runSuite(file); await runSuite(file);"},{key:"runSuite",from:"await runSuite(file, runner);",to:"global.$_$wallabyVitest.runSuite(file); await runSuite(file, runner);"}]:e===globalContext.collectedFilePath?s=[{key:"collected",from:"rpc().onCollected(files);",to:"rpc().onCollected(files, global.$_$session);"},{key:"collected",from:"rpc().onCollected(files);",to:"rpc().onCollected(files, global.$_$session);"},{key:"collected",from:"(_b = runner.onCollected) == null ? void 0 : _b.call(runner, files)",to:"(_b = runner.onCollected) == null ? void 0 : _b.call(runner, files, global.$_$session)"}]:e!==globalContext.runtimeChainPath&&e!==globalContext.snapshotStatePath||(s=[{from:'await promises.writeFile(file, transformed, "utf-8");',to:"global.$_$wallabyVitest.inlineSnapshotSaved(file, transformed)",optional:!0},{from:"await environment.saveSnapshotFile(file, transformed);",to:"global.$_$wallabyVitest.inlineSnapshotSaved(file, transformed)",optional:!0},{from:'if (hasSnapshot && this._updateSnapshot === "all" || ',to:'global.$_$tracer._matchSnapshot({ key, snapshotPath: this.snapshotPath }); if (hasSnapshot && this._updateSnapshot === "all" || ',optional:!0},{from:"this._updateSnapshot = options.updateSnapshot;",to:"this._updateSnapshot = global.$_$wallabyVitest.updateSnapshot();",optional:!0},{from:'if (this._updateSnapshot === "all" && this._uncheckedKeys.size) {',to:'if ((global.$_$wallabyVitest.canUpdateSnapshot(this)) && this._updateSnapshot === "all" && this._uncheckedKeys.size) {',optional:!0},{from:"snapshot.unchecked = !status.deleted ? uncheckedCount : 0;",to:"snapshot.unchecked = !status.deleted ? this.getUncheckedCount() : 0;",optional:!0},{from:"snapshot.uncheckedKeys = Array.from(uncheckedKeys);",to:"snapshot.uncheckedKeys = Array.from(this.getUncheckedKeys());",optional:!0},{from:'if (hasSnapshot && this._updateSnapshot === "all" || (!hasSnapshot || !snapshotIsPersisted) && (this._updateSnapshot === "new" || this._updateSnapshot === "all")) {',to:'if ((global.$_$wallabyVitest.canUpdateSnapshot(this)) && ((hasSnapshot && this._updateSnapshot === "all" || (!hasSnapshot || !snapshotIsPersisted) && (this._updateSnapshot === "new" || this._updateSnapshot === "all")))) {',optional:!0},{from:"this.snapshotState = this.getSnapshotState(test);",to:"this.snapshotState = this.getSnapshotState(test); global.$_$wallabyVitest.getSnapshotState(this);",optional:!0},{from:"this.snapshotState = this.getSnapshotState(filepath);",to:"this.snapshotState = this.getSnapshotState(filepath); global.$_$wallabyVitest.getSnapshotState(this);",optional:!0},{from:"if (!isRunningInBenchmark())",to:"if (!isRunningInBenchmark()) return;",optional:!0}]),s){let t=[];if(s.forEach((o,a)=>{!t||-1!==l.indexOf(o.from)||o.optional||o.key&&s.find((t,e)=>e!==a&&t.key===o.key&&-1!==l.indexOf(t.from))||t.push(o.key||o.from)}),t.length)throw new Error(`Transform (${e}): Wallaby is not compatible with current version of Vitest [${t.reduce((t,e)=>t+(t.length?", "+e:e),"")}].`);return s.reduce((t,e)=>t.replace(e.from,e.to),l)}return{code:l}}}},viteTestPluginAdjustments(){return[this.WallabyViteServerPlugin(),this.WallabyVitePrePlugin(),this.WallabyVitePostPlugin()]},adjustedWorkerEntryPoint(t){t=path.basename(t).split(".").slice(0,-1).join(".");return semver.gte(globalContext.vitestVersion,"1.2.0")||semver.gte(globalContext.vitestVersion,"1.0.0")&&"child"===t?utils.normalizePath(path.resolve(__dirname,"worker.mjs")):utils.normalizePath(path.resolve(__dirname,t+".mjs"))},forkChildProcess(t,e,o){var a=process.execArgv.filter(t=>t.startsWith("--experimental-loader=")),a=(o.execArgv=o.execArgv||[],o.execArgv=[...o.execArgv,...a,"--no-warnings"],utils.normalizePath(path.resolve(__dirname,"child.mjs"))),a=fork(a,e,o),e=this.generateWorkerContext();return e.command="wallabyStart",a.send(e),a},runResult(t){t.error&&tracer.reportGlobalError("Error executing tests in vitest:\n"+(t.error.message||"")+"\n"+(t.error.stack||""))},generateWorkerContext(){var t=Object.assign(Object.assign({},wallaby),{localProjectRoot:globalContext.localProjectRoot}),e=(delete t.delayStart,delete t.start,delete t._startWhenReceiverIsReady,delete t.testFramework,testRunContext.childSessionId++);return{wallabyContext:{entryFilePath:globalContext.entryFilePath,childFilePath:globalContext.childFilePath,vmFilePath:globalContext.vmFilePath,externalModulesExecutorPath:globalContext.externalModulesExecutorPath,esmHooksPath:globalContext.esmHooksPath,viteNodeUtils:globalContext.viteNodeUtils,viteNodeSourceMap:globalContext.viteNodeSourceMap,vitestDistLoader:globalContext.vitestDistLoader,vendorEntryFilePath:globalContext.vendorEntryFilePath,collectedFilePath:globalContext.collectedFilePath,runtimeChainPath:globalContext.runtimeChainPath,snapshotStatePath:globalContext.snapshotStatePath,utilsErrorsPath:globalContext.utilsErrorsPath,normalizedRootPrefix:globalContext.normalizedRootPrefix,normalizedLocalProjectDir:globalContext.normalizedLocalProjectDir,normalizedProjectCacheDir:globalContext.normalizedProjectCacheDir,vitestVersion:globalContext.vitestVersion,vitestEnvironmentPath:globalContext.vitestEnvironmentPath,globals:{$_$coverage:[],$_$baseDir:$_$baseDir,$_$slow:$_$slow,$_$tests:$_$tests,$_$testFiles:$_$testFiles,$_$session:$_$session,$_$initialSpecId:1e5*e,$_$traceContext:$_$traceContext,$_$profileRun:$_$profileRun,$_$resolveGetters:$_$resolveGetters,$_$logLimits:$_$logLimits,wallaby:t,$_$childSession:e},tracer:{_filePathToFileData:global.$_$tracer._filePathToFileData,_hints:global.$_$tracer._hints,_autoConsoleLog:global.$_$tracer._autoConsoleLog,_captureConsoleLog:global.$_$tracer._captureConsoleLog,_preserveComments:global.$_$tracer._preserveComments,_reportConsoleErrorAsError:global.$_$tracer._reportConsoleErrorAsError,_suppressCallStackEval:global.$_$tracer._suppressCallStackEval,_updateNoMoreThanOneSnapshotPerTestFileRun:global.$_$tracer._updateNoMoreThanOneSnapshotPerTestFileRun,_shouldReportProgramScope:global.$_$tracer._shouldReportProgramScope,_maxLogEntrySize:global.$_$tracer._maxLogEntrySize,_maxTraceSteps:global.$_$tracer._maxTraceSteps,_manualTestRun:global.$_$tracer._manualTestRun,_updateSnapshotsRun:global.$_$tracer._updateSnapshotsRun,_expressionsToEvaluate:global.$_$tracer._expressionsToEvaluate}}}},async transformRequest(a,t,e,o,l,s){var i;if(!l)try{l=await o._wallabyTransformRequest(a,t,e)}catch(t){let e=getFileData(a);if(!s&&!e&&a.startsWith("/")&&null!=(n=null==(n=null==o?void 0:o.server)?void 0:n.config)&&n.root&&(a=path.join(o.server.config.root,a.substr(1)),e=getFileData(a)),e)return{code:`const e = ${JSON.stringify((i=t,Object.getOwnPropertyNames(i).reduce((t,e)=>("stack"!==e&&(t[e]=i[e]),t),{})))}; const error = new Error(); Object.keys(e).forEach(k => error[k] = e[k]); throw error;`,_wallabyProcessed:!0};throw t}if(!globalContext.globalSetup&&!l._wallabyProcessed){const r=getFileData(a);if(!s&&!r&&a.startsWith("/")&&null!=(s=null==(n=null==o?void 0:o.server)?void 0:n.config)&&s.root)return a=path.join(o.server.config.root,a.substr(1)),global.$_$wallabyVitest.transformRequest(a,t,e,o,l,!0);if(r&&r.instrument){let t=_.extend({},global.$_$tracer._hints);!r.test||t.allowIgnoringCoverageInTests||(t=_.omit(t,"ignoreCoverage","ignoreCoverageForFile")),t=_.omit(t,"testFileSelection"),l.map&&l.map.sources&&(l.map.sources=l.map.sources.map(t=>t||r.path));let o;l.map&&(r.changeStart||r.logMarkers&&r.logMarkers.length||r.extractedComments&&!r.extractedComments.isCoverageIgnored||r.test)&&(o=new utils.SourceMapConsumer(l.map));var n=utils.mapTextPosition(r.changeStart&&r.changePosition,o),s=r.logMarkers||[];let e;try{e=utils.instrument(l.code,{file:r.id,test:r.test,fileName:path.basename(r.path),testFileChangeStart:n,hints:t,recordValues:global.$_$tracer._autoConsoleLog,captureConsoleLog:global.$_$tracer._captureConsoleLog,recordMatchSnapshotRanges:!0,preserveComments:global.$_$tracer._preserveComments,logMarkers:s.map(t=>({originalRange:t.range,range:utils.mapOriginalRangeToTransformed(o,t.range),changeId:t.id,traceId:t.traceId,expanded:t.expanded,new:t.new,exp:t.exp,action:t.action,logpoint:t.logpoint,inlineLogpoint:t.inlineLogpoint})),extractedComments:utils.remapComments(r.extractedComments,l.code,o)})}catch(t){a=r.inOriginalFilesCache?fs.readFileSync(path.join(globalContext.originalCacheRoot,r.path),"utf8"):fs.readFileSync(path.join(globalContext.localProjectRoot,r.path),"utf8");throw utils.formatInstrumentationError(t,l.code,r.path,o,a)}e.liveCommentLines&&l.map?(o=o||new utils.SourceMapConsumer(l.map),e.liveCommentLines=_.chain(e.liveCommentLines).map((t,e)=>({line:parseInt(e,10),column:t+1})).map(({line:t,column:e})=>utils.mapTransformedRangeToOriginal(o,[t,e,t,e])).filter(t=>t&&t.length).map(t=>t[0]).value()):e.liveCommentLines&&(e.liveCommentLines=Object.keys(e.liveCommentLines).map(t=>parseInt(t,10)).filter(t=>t).map(t=>t)),testRunContext.instrumentedFiles.set(r.id,{id:r.id,parentFilePath:void 0,transformed:_.omit(l,"code"),instrumented:_.omit(e,"code","map"),ts:r.ts,originalTs:r.originalTs,runnerCacheKey:r.runnerCacheKey,matchSnapshotRanges:e.matchSnapshotRanges&&e.matchSnapshotRanges.length&&o?e.matchSnapshotRanges.map(t=>utils.mapTransformedRangeToOriginal(o,t)):void 0,transformedTime:(new Date).toISOString(),lineMap:utils.updateFileMap({},l.map?[l.map,e.map]:[e.map]),usedLogpoints:s.filter(t=>t.logpoint).map(t=>t.id)}),l.code=e.code,l.map=e.map,l._wallabyProcessed=!0}}return l},getFileTimestamp(t){t=getFileData(t=normalizeModuleId(t));return t&&t.ts},adjustTransformRequestId(t){var e=getFileData(t=normalizeModuleId(t));return e&&e.instrument?-1===t.indexOf("?")?t+"?wallaby="+e.ts+(globalContext.globalSetup?"G":""):t+"&wallaby="+e.ts+(globalContext.globalSetup?"G":""):t},sanitizeFilePath(t){var e,o;return t&&(1===(e=t.split("?")).length?t:(o=e[1].split("&").filter(t=>!t.startsWith("wallaby=")).join("&"),e[0]+(o?"?"+o:"")))},wallabyWorkerMessage(t){t&&t.sessionId&&t.sessionId!==global.$_$session||wallabyWorkerMessageProcessors[t.type]&&wallabyWorkerMessageProcessors[t.type](t.payload)},tinyPoolOptions(t){return t.execArgv=[...t.execArgv||[],...process.execArgv,"--no-warnings"],t},wrapTinyPoolResult(t){return globalContext.tinyPool=t},abortSignal(){return globalContext.abortSignal=testRunContext.abortSignal,globalContext.abortSignal},async loadGlobalSetupFiles(t){globalContext.globalSetup=!0;try{return await t()}finally{globalContext.globalSetup=!1}}},tracer.start(async()=>{var e,o=global.$_$session;if(global.$_$session!==o)return[];await globalContext.runningPromise,globalContext.abortSignal&&globalContext.abortSignal.emit();try{await initializeVitest()}catch(t){try{var a=await globalContext.esmHooks.getErrorsAndWarnings();null!=(e=null==a?void 0:a.errors)&&e.length&&tracer.reportGlobalError("Error: "+a.errors.reduce((t,e)=>t+(t?"\n":"")+e,""))}catch(t){tracer.reportGlobalError("FAILED"+(t&&t.message||"")+"\n"+(t&&t.stack||""))}return void tracer.reportGlobalError("Failed to initialize wallaby vitest.\n"+(t&&t.message||"")+"\n"+(t&&t.stack||""))}try{if(tracer.debugLog("Scheduling Vitest Run ("+o+"): "+(new Date).toISOString()),global.$_$session!==o)return[];if(globalContext.ctx.vitenode&&globalContext.ctx.vitenode.fetchCache)try{for(var[t]of globalContext.ctx.vitenode.fetchCache){var l=getFileData(normalizeModuleId(t));!l||globalContext.previousTimeStamps[l.path]&&l.ts===globalContext.previousTimeStamps[l.path]||globalContext.ctx.vitenode.fetchCache.delete(t)}}catch(t){}if(globalContext.ctx.server&&globalContext.ctx.server.moduleGraph&&globalContext.ctx.server.moduleGraph.fileToModulesMap)try{for(var[s,i]of globalContext.ctx.server.moduleGraph.fileToModulesMap){var n=getFileData(normalizeModuleId(s));if(n&&(!globalContext.previousTimeStamps[n.path]||n.ts!==globalContext.previousTimeStamps[n.path]))for(const u of i)globalContext.ctx.server.moduleGraph.invalidateModule(u)}}catch(t){}if(globalContext.ctx.projects&&globalContext.ctx.projects.forEach(t=>{if(t.vitenode&&t.vitenode.fetchCache)try{for(var[e]of t.vitenode.fetchCache){var o=getFileData(normalizeModuleId(e));!o||globalContext.previousTimeStamps[o.path]&&o.ts===globalContext.previousTimeStamps[o.path]||t.vitenode.fetchCache.delete(e)}}catch(t){}if(t.server&&t.server.moduleGraph&&t.server.moduleGraph.fileToModulesMap)try{for(const i of t.server.moduleGraph._hasResolveFailedErrorModules)t.server.moduleGraph.invalidateModule(i);for(var[a,l]of t.server.moduleGraph.fileToModulesMap){var s=getFileData(normalizeModuleId(a));if(s&&(!globalContext.previousTimeStamps[s.path]||s.ts!==globalContext.previousTimeStamps[s.path]))for(const n of l)t.server.moduleGraph.invalidateModule(n)}}catch(t){}}),globalContext.previousTimeStamps={},Object.values(global.$_$tracer._filePathToFileData).forEach(t=>{globalContext.previousTimeStamps[t.path]=t.ts}),o===global.$_$session){var r,c=async()=>{let e=!1,t=[...testRunContext.testFiles.flatMap(t=>{t=globalContext.ctx.getFileWorkspaceSpecs(utils.normalizePath(t));return t&&t.length||(e=!0),t})];return e&&(globalContext.ctx.projects.forEach(t=>{delete t.testFilesList}),await globalContext.ctx.globTestFiles(),t=[...testRunContext.testFiles.flatMap(t=>globalContext.ctx.getFileWorkspaceSpecs(utils.normalizePath(t)))]),t};if(globalContext.ctx.projects){globalContext.ctx.logger.printBanner=()=>{},globalContext.ctx.logger.log=()=>{},await globalContext.ctx.report("onInit",globalContext.ctx);const d=[...globalContext.ctx.projects].sort((t,e)=>{var o;return((null==(o=e.config)?void 0:o.root)||e.ctx.config.root||e.ctx.config.dir).length-((null==(o=t.config)?void 0:o.root)||t.ctx.config.root||t.ctx.config.dir).length});semver.gte(globalContext.vitestVersion,"2.1.0")?globalContext.runningPromise=globalContext.ctx.runFiles(await c()):(r=[...testRunContext.testFiles.map(t=>[(t=>{if(globalContext.fileProjectMap&&globalContext.fileProjectMap.has(t))return globalContext.fileProjectMap.get(t);tracer.debugLog("Did not find project to provide to 'vitest' for file: "+t);var a;return a=t,d.find(t=>{var e;let o=(null==(e=t.config)?void 0:e.root)||t.ctx.config.root||t.ctx.config.dir;return o=isWindows?(o||"").replace(/\//g,path.sep):o,a=isWindows?a.replace(/\//g,path.sep):a,o===a||a.startsWith(o+path.sep)})})(t),t]).filter(([t])=>!!t)],globalContext.runningPromise=globalContext.ctx.runFiles(r))}else semver.gte(globalContext.vitestVersion,"2.1.0")?globalContext.runningPromise=globalContext.ctx.runFiles(await c()):globalContext.runningPromise=globalContext.ctx.runFiles([...testRunContext.testFiles]);await globalContext.runningPromise}}catch(t){o===global.$_$session&&(tracer.debugLog("Vitest Error: "+(new Date).toISOString()),t)&&console.error(t.stack)}finally{globalContext.runningPromise=Promise.resolve(),o===global.$_$session?(tracer.debugLog("Vitest Run Complete ("+o+"): "+(new Date).toISOString()),globalContext.ctx.snapshot&&globalContext.ctx.snapshot.summary&&globalContext.ctx.snapshot.summary.uncheckedKeysByFile&&globalContext.ctx.snapshot.summary.uncheckedKeysByFile.forEach(e=>{if(e.keys&&e.keys.length){let t=e.keys;if(tracer.hasSpecFilter()&&testRunContext.specFileTests){const a=testRunContext.specFileTests.flatMap(t=>t.tests).map(t=>t.path.join(" > "));t=e.keys.filter(e=>a.some(t=>e.startsWith(t)))}var o;t.length&&(o=`${t.length} snapshot${1<t.length?"s":""} obsolete `+("\n\t"+t.join("\n\t")||""),tracer.reportGlobalErrorObject({message:o,stack:o+`
    at ${e.filePath}:1:0`,snapshot:!0,allowNotMappedStackLines:!0}))}}),tracer.resetEnvGlobal(),Object.keys(testRunContext.esmWarnings.reduce((t,e)=>(t[e]=!0,t),{})).map(t=>{console.warn(t)}),tracer.complete(),testRunContext=void 0):tracer.debugLog("Vitest Run Abandoned ("+o+"): "+(new Date).toISOString())}}),module.exports={init:function(t){const o=[];return testRunContext={testFiles:t,instrumentedFiles:new Map,fetchedModules:new Map,childSessionId:1,esmWarnings:[],abortSignal:{off:(t,e)=>o.push(e),once:()=>o.length=0,emit:()=>o.forEach(t=>t())}},{configure:function(){throw new Error("Vitest does not support configuration modifications. Please let us know if this is an issue for you at: https:/github.com/wallabyjs/public/issues")}}}};
/*
 * wallaby-core - v1.0.1620
 * https://wallabyjs.com
 * Copyright (c) 2014-2024 Wallaby.js - All Rights Reserved.
 *
 * This source code file is a part of wallaby-core and is a proprietary (closed source) software.

 * IMPORTANT:
 * Wallaby.js is a tool made by software developers for software developers with passion and love for what we do.
 * Pirating the tool is not only illegal and just morally wrong,
 * it is also unfair to other fellow programmers who are using it legally,
 * and very harmful for the tool and its future.
 */
const path=require("path"),fs=require("fs"),crypto=require("crypto"),writeFileAtomic=require("write-file-atomic").sync,tracer=global.$_$tracer,workerId=tracer.workerId,utils=tracer._utils,handleUncaughtException=tracer._handleUncaughtException,localProjectRoot=path.dirname(global.wallaby._localNodeModules),originalCacheRoot=global.wallaby._originalCacheRoot,jasmineInitializerPath=path.join(__dirname,"jasmineInitializer.js"),assert=require("assert"),semver=require("semver");let jestRuntime,jestConfig,createTestScheduler,jestRunGlobalHook,prettyFormat,clearDefaultResolverCache,normalizedProjectCacheDir=void 0,normalizedLocalProjectDir=void 0,jestVersion=global.wallaby._toolVersion;if(!jestVersion)throw new Error("Jest version could not be determined.");process.env.VUE_CLI_BABEL_TRANSPILE_MODULES=!0,process.env.BABEL_ENV||(process.env.BABEL_ENV="test"),process.env.NODE_ENV||(process.env.NODE_ENV="test"),process.env.PUBLIC_URL="",process.env.JEST_WORKER_ID=workerId+1;const utilsLazyLoadDependencyReplacement=fs.existsSync(path.join(localProjectRoot,"node_modules/mock-fs"))?()=>[]:utils.lazyLoadDependencyReplacement,compactErrorMessage=(utils.patchModulesCode([{files:["@jest/transform/build/ScriptTransformer.js","@jest/transform/build/index.js"],replacements:[{from:"const getScriptCacheKey = (filename, instrument) => {",to:"const getScriptCacheKey = (filename, instrument) => { var wallabyKey = global.$_$tracer._fileCacheKey(filename); if (wallabyKey) return wallabyKey;",optional:!0},{from:"constructor(config) {",to:"constructor(config) { var _getTransformer = this._getTransformer; this._getTransformer = function(filename) { var transformer = _getTransformer.apply(this, arguments); return global.$_$tracer._extendJestTransformer ? global.$_$tracer._extendJestTransformer(filename, transformer) : transformer; };",optional:!0},{from:"this._config = _config;",to:"this._config = _config; var _getTransformer = this._getTransformer; this._getTransformer = function(filename) { var transformer = _getTransformer.apply(this, arguments); return global.$_$tracer._extendJestTransformer ? global.$_$tracer._extendJestTransformer(filename, transformer) : transformer; };",optional:!0},{from:"!!this._config.transform && !!this._config.transform.length && !isIgnored",to:"!isIgnored",optional:!0},{from:"this._config.transform.length !== 0 && !isIgnored",to:"!isIgnored",optional:!0},{from:"this._config.transform.length > 0 && !isIgnored",to:"!isIgnored",optional:!0},{from:"transform(filename, options, fileSource) {",to:"transform(filename, options, fileSource) { var wallabyFileId = global.$_$tracer._fileId(filename); if (wallabyFileId) { global.$_$tracer.programScopeStartLoading(wallabyFileId); }",optional:!0},{from:"transformAsync(filename, options, fileSource) {",to:"transformAsync(filename, options, fileSource) { var wallabyFileId = global.$_$tracer._fileId(filename); if (wallabyFileId) { global.$_$tracer.programScopeStartLoading(wallabyFileId); }",optional:!0},{from:"function assertSyncTransformer(transformer, name) {",to:"function assertSyncTransformer(transformer, name) { return;",optional:!0},{from:"code = this._config.cache ? readCodeCacheFile(cacheFilePath)",to:"code = this._config.cache ? global.$_$tracer._readCodeCacheFile(filename, cacheFilePath, readCodeCacheFile, readCacheFile)",optional:!0}]},{files:["@jest/core/build/jest.js","@jest/core/build/index.js"],replacements:[{from:"'use strict';",to:"'use strict'; exports.runGlobalHook = _interopRequireDefault(require('./runGlobalHook'));",optional:!0}]},{files:["@jest/core/build/index.js"],replacements:[{from:'var _TestScheduler = __webpack_require__("./src/TestScheduler.ts");',to:'Object.defineProperty(exports, "runGlobalHook", ({enumerable: true,get: function () {return __webpack_require__("./src/runGlobalHook.ts");}}));var _TestScheduler = __webpack_require__("./src/TestScheduler.ts");',optional:!0}]},{files:["jest-resolve/build/defaultResolver.js","jest-resolve/build/index.js"],replacements:[{from:"const checkedPaths = new Map();",to:"const checkedPaths = new Map(); checkedPaths.get = function() {};",optional:!0}]},{files:["jest-message-util/build/index.js"],replacements:[{from:"${renderedCallsite}\\n${stacktrace}",to:"${stacktrace}"}]},{files:["vue-jest/lib/process.js"],replacements:[{from:"return { code: output }",to:"return { code: output, scriptSrc: parts.script && parts.script.src }",optional:!0},{from:"code: output.code,",to:"code: output.code, scriptSrc: descriptor.script && descriptor.script.src,",optional:!0},{from:"const { descriptor } = parse(src)",to:"const { descriptor } = parse(src, { pad: true })",optional:!0}]},{files:["react-app-rewired/scripts/test.js"],replacements:[{from:"require(`${scriptVersion}/scripts/test`);",to:"module.exports = require('../overrides/jest')();",optional:!0},{from:"if (paths.customScriptsIndex > -1) {",to:"module.exports = config; return; if (paths.customScriptsIndex > -1) {",optional:!0}]},{files:["jest-snapshot/build/inline_snapshots.js","jest-snapshot/build/InlineSnapshots.js","jest-snapshot/build/index.js"],replacements:[{from:"_callee$property$loc$.column",to:"0",optional:!0},{from:"${column - 1}",to:"0",optional:!0},{from:"const {line, column} = callee.property.loc.start;",to:'const {line } = callee.property.loc.start; const column = 0; if(callee.property.name !== "toMatchInlineSnapshot") return;',optional:!0},{from:"const snapshotsByFile = groupSnapshotsByFile(snapshots);",to:"global.$_$tracer._remapInlineSnapshots(snapshots); const snapshotsByFile = groupSnapshotsByFile(snapshots);",optional:!0},{from:"= callee.property.loc.start;",to:'= {...callee.property.loc.start, column: 0}; if(callee.property.name !== "toMatchInlineSnapshot") return;',optional:!0},{from:"const snapshotsByFile = (0, _utils.groupSnapshotsByFile)(snapshots);",to:"global.$_$tracer._remapInlineSnapshots(snapshots); const snapshotsByFile = (0, _utils.groupSnapshotsByFile)(snapshots);",optional:!0}]},{files:["jest-snapshot/build/State.js","jest-snapshot/build/index.js"],replacements:[{from:"const pass = expected === receivedSerialized;",to:"const pass = expected === receivedSerialized; global.$_$tracer._matchSnapshot({key, snapshotPath: this._snapshotPath});",optional:!0},{from:"hasSnapshot && this._updateSnapshot === 'all'",to:"hasSnapshot && (!global.$_$tracer._updateNoMoreThanOneSnapshotPerTestFileRun || !pass && (this.updated === 0)) && this._updateSnapshot === 'all'",optional:!0},{from:"this._updateSnapshot === 'all' && this._uncheckedKeys.size",to:"this._updateSnapshot === 'all' && (!global.$_$tracer._updateNoMoreThanOneSnapshotPerTestFileRun || (this.updated === 0)) && this._uncheckedKeys.size",optional:!0}]},{files:["jest-jasmine2/build/jasmine/Env.js","expect/build/toThrowMatchers.js"],replacements:[...utilsLazyLoadDependencyReplacement("_jestMessageUtil","jest-message-util")]},{files:["@testing-library/jest-dom/dist/to-be-checked.js","@testing-library/dom/dist/queries/role.js"],replacements:utilsLazyLoadDependencyReplacement("_ariaQuery","aria-query",{doubleQuotes:!0})},{files:["@testing-library/dom/dist/role-helpers.js"],replacements:[...utilsLazyLoadDependencyReplacement("_ariaQuery","aria-query",{doubleQuotes:!0}),...utilsLazyLoadDependencyReplacement("elementRoleList",void 0,{dependencyOverride:"buildElementRoleList(_ariaQuery().elementRoles)",varType:"const"})]},{files:["@testing-library/dom/dist/pretty-dom.js"],replacements:utilsLazyLoadDependencyReplacement("_getUserCodeFrame","./get-user-code-frame",{doubleQuotes:!0})},{files:["ts-jest/dist/config/config-set.js"],replacements:[{from:"this._overriddenCompilerOptions = {",to:"this._overriddenCompilerOptions = { sourceMap: true, ",optional:!0}]},{files:["ts-jest/dist/compiler/ts-compiler.js"],replacements:[{from:"if (watchMode) {",to:"if (true) {"},{from:"this._updateMemoryCache(this._getFileContentFromCache(fileToReTypeCheck),",to:"var content = this._getFileContentFromCache(fileToReTypeCheck); if (!content) continue; this._updateMemoryCache(content,"}]},{files:["ts-jest/dist/compiler.js"],replacements:[{from:"getScriptVersion: function (fileName) {",to:'getScriptVersion: function (fileName) { fileName = require("path").normalize(fileName);'},{from:"getScriptSnapshot: function (fileName) {",to:'getScriptSnapshot: function (fileName) { fileName = require("path").normalize(fileName);'}]},{files:["jest-runner/build/index.js"],replacements:[{from:"process.env.JEST_WORKER_ID = '1';",to:""}]},{files:["jest-jasmine2/build/jasmine/Env.js"],replacements:[{from:"oldListenersException = process",to:"oldListenersException = (j$.process || process)"},{from:"oldListenersRejection = process",to:"oldListenersRejection = (j$.process || process)"}]},...semver.lt(jestVersion,"30.0.0")?[]:[{files:["jest-jasmine2/build/jasmine/jasmineLight.js"],replacements:[{from:"oldListenersException = [...process",to:"oldListenersException = [...(j$.process || process)"},{from:"oldListenersRejection = [...process",to:"oldListenersRejection = [...(j$.process || process)"}]}],{files:["jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js","jest-circus/build/jestAdapterInit.js"],replacements:[{from:"(0, _state.addEventHandler)(eventHandler);",to:"(0, _state.addEventHandler)(eventHandler); (0, _state.addEventHandler)(new global.$_$tracer.CircusReporter(global.$_$tracer, globalConfig.$_$session).handler);",optional:!0},{from:"testNamePattern: globalConfig.testNamePattern",to:"testNamePattern: globalConfig.testNamePattern, testPath",optional:!0}]},{files:["jest-circus/build/run.js","jest-circus/build/index.js"],replacements:[{from:"test.mode === 'skip' ||",to:"test.mode === 'skip' || (global.$_$tracer.jestCircusSkipTest && global.$_$tracer.jestCircusSkipTest(test)) || ",optional:!0}]},{files:["jest-circus/build/eventHandler.js","jest-circus/build/index.js"],replacements:[{from:"const eventHandler = (event, state) => {",to:"const eventHandler = (event, state) => { if (event && event.concurrent) { event.concurrent = false; }",optional:!0},{from:"if (state.currentlyRunningTest)",to:"if (state.currentlyRunningTest && state.currentlyRunningTest._reject) { state.currentlyRunningTest._reject(event.error); delete state.currentlyRunningTest._reject; break; } if (state.currentlyRunningTest)",optional:!0}]},{files:["jest-circus/build/eventHandler.js"],replacements:[{from:"case 'error': {",to:`case 'error': {
          if (state.currentlyRunningTest && state.currentlyRunningTest._reject) {
            state.currentlyRunningTest._reject(event.error);
            delete state.currentlyRunningTest._reject;
            break;
          }`}]},{files:["jest-circus/build/utils.js","jest-circus/build/index.js"],replacements:[{from:"(hasFocusedTests && child.mode !== 'only') ||",to:"(hasFocusedTests && child.mode !== 'only') || (global.$_$tracer.jestCircusSkipTest && global.$_$tracer.jestCircusSkipTest(child)) || ",optional:!0},{from:"timeoutID = setTimeout(",to:"testOrHook._reject = reject;timeoutID = setTimeout(",optional:!0},{from:"clearTimeout(timeoutID);",to:"clearTimeout(timeoutID);delete testOrHook._reject;",optional:!0}]},{files:["jest-circus/build/formatNodeAssertErrors.js","jest-circus/build/index.js"],replacements:[{from:"function isAssertionError(error) {",to:"function isAssertionError(error) { return false;",optional:!0}]},{files:["jest-util/build/setGlobal.js","jest-util/build/index.js"],replacements:[{from:"globalToMutate[key] = value;",to:`globalToMutate[key] = value;
             if (!globalToMutate.regeneratorRuntime && global.regeneratorRuntime) {
              globalToMutate.regeneratorRuntime = global.regeneratorRuntime;
             }
             globalToMutate.$_$wp = global.$_$wp;
             globalToMutate.$_$wpe = global.$_$wpe;
             globalToMutate.$_$w = global.$_$w;
             globalToMutate.$_$w_ = global.$_$w_;
             globalToMutate.$_$wf = global.$_$wf;
             globalToMutate.$_$wv = global.$_$wv;
             globalToMutate.$_$tracer = global.$_$tracer;
             globalToMutate.nodeGlobal = global;
             global.$_$tracer.setEnvGlobal(globalToMutate);
             globalToMutate.$_$tracer._jasmineAdapter = new global.$_$tracer.JasmineReporter(global.$_$tracer);
        `,optional:!0}]},{files:["jest-util/build/tryRealpath.js","jest-util/build/index.js"],replacements:[{from:"path = _gracefulFs().realpathSync.native(path);",to:`const newPath = _gracefulFs().realpathSync.native(path);
        path = (process.platform === 'win32' && path.substr(0, 1).toLowerCase() !== newPath.substr(0, 1).toLowerCase()) ? path : newPath;`,optional:!0}]},{files:["next/dist/build/swc/jest-transformer.js"],replacements:[{from:"return((0, _index).transformSync(src, {",to:"(swcTransformOpts.jsc.transform.optimizer && delete swcTransformOpts.jsc.transform.optimizer); swcTransformOpts.sourceMaps = true; return((0, _index).transformSync(src, {",optional:!0},{from:"return (0, _index).transformSync(src, {",to:"(swcTransformOpts.jsc.transform.optimizer && delete swcTransformOpts.jsc.transform.optimizer); swcTransformOpts.sourceMaps = true; return (0, _index).transformSync(src, {"}]},{files:["jest-preset-angular/build/utils/ngcc-jest-processor.js"],replacements:[{from:"process.stderr, process.stderr",to:"process.stdout, process.stdout",optional:!0}]},{files:["@jest/reporters/build/getResultHeader.js"],replacements:[{from:"exports.default = getResultHeader;",to:"exports.default = () => '';",optional:!0}]},{files:["@babel/core/lib/errors/rewrite-stack-trace.js"],replacements:[{from:"const SUPPORTED = !!Error.captureStackTrace;",to:"const SUPPORTED = false;",optional:!0}]},utils.jestTsNodePatch()],"Possibly incompatible/unsupported Jest version"),e=>{var t;return e&&0===e.indexOf("Error: expect(")&&-1===e.indexOf(".toMatchSnapshot(")&&-1===e.indexOf(".toThrowErrorMatchingSnapshot(")?((t=e.split("\n")).shift(),t[0]&&0!==t[0].length||t.shift(),t.join("\n")):e}),isAssertionError=e=>e&&(e instanceof assert.AssertionError||e.name===assert.AssertionError.name||"ERR_ASSERTION"===e.code),CircusReporter=function(u,p){let m=u.initialSpecId(),d,h;function g(e){return(e=f(e)).pop(),e}const f=function(e){var t=[];let r=e;for(;t.unshift(r.name),r=r.parent;);return t.shift(),t};u.jestCircusSkipTest=e=>global.$_$session!==p||!!u.hasSpecFilter()&&!u.specFilter(f(e));this.handler=function(r,e){if(p===global.$_$session)if("setup"===r.name)h=u._fileId(r.testPath);else if("run_finish"===r.name)global.$_$initialSpecId=m+1;else if("run_start"===r.name){u.started({total:"unknown number of"});for(var t=[],s=[e.rootDescribeBlock];s.length;){var a=s.pop();a.children&&s.push(...a.children),"test"===a.type&&t.push({path:f(a),mode:u.jestCircusSkipTest(a)?"ignore":e.hasFocusedTests?"only"===a.mode?"only":"ignore":a.mode||"run"})}u.specFileTests([{specFileId:h,tests:t}])}else if("test_start"===r.name)m++,u.jestCircusSkipTest(r.test)||u.specStart(m,(o=r.test,f(o).filter(e=>!!e).join(" > ")),h,f(r.test));else if("test_fn_start"===r.name)u.specSyncStart(),d=(new u._Date).getTime();else if("test_todo"===r.name){u.specSyncEnd();var o=u.specEnd();u.result({id:m,timeRange:o,name:r.test.name,suite:g(r.test),status:"todo",time:0,testFile:h})}else if("test_skip"===r.name){u.specSyncEnd();var n=u.specEnd();u.jestCircusSkipTest(r.test)||u.result({id:m,timeRange:n,name:r.test.name,suite:g(r.test),status:"skipped",time:0,testFile:h})}else if("test_done"===r.name){u.specSyncEnd();var n=u.specEnd(),l={id:m,timeRange:n,name:r.test.name,suite:g(r.test),status:"executed",time:(new u._Date).getTime()-d,log:[],testFile:u.entryFile()};for(let t=0;t<r.test.errors.length;t++){let e=r.test.errors[t];var i,c={error:e=Array.isArray(e)?e[0]&&("string"==typeof e[0].stack||e[0].message)?e[0]:(e[1].message="thrown: "+prettyFormat()(e[0],{maxDepth:3}),e[1]):e,passed:!1};c.message=compactErrorMessage(e?e.name&&e.message?e.name+": "+e.message:e.toString():"empty error"),c.stack=e?e.stack:null,c.message&&0===c.message.indexOf("Error: expect(")&&(c.message=c.message.replace("Error: ","")),isAssertionError(e)&&(c.message&&0===c.message.indexOf("AssertionError: ")&&(c.message=c.message.replace("AssertionError: ","")),e.actual||e.expected)&&(i={notEqual:"to not equal",notStrictEqual:"to not strictly equal",equal:"to equal",strictEqual:"to strictly equal"}[{"!=":"notEqual","!==":"notStrictEqual","==":"equal","===":"strictEqual"}[e.operator]||e.operator])&&(c.message=`Expected ${prettyFormat()(e.expected)} ${i} `+prettyFormat()(e.actual),c.showDiff=!0,c.actual=c.error.actual,c.expected=c.error.expected),c.error.matcherResult?(c.matcherName=c.error.matcherResult.name,c.actual=c.error.matcherResult.actual,c.expected=c.error.matcherResult.expected):(c.showDiff=c.error.showDiff,c.actual=c.error.actual,c.expected=c.error.expected),c.showDiff=c.showDiff||"toEqual"===c.matcherName||"toStrictEqual"===c.matcherName||"toBe"===c.matcherName||"toMatchSnapshot"===c.matcherName||"toMatchInlineSnapshot"===c.matcherName||"toThrowErrorMatchingSnapshot"===c.matcherName,l.log.push(u.setAssertionData(c,{message:c.message||"",stack:c.stack}))}l.log.length||delete l.log,u.result(l)}}},JasmineReporter=function(i){const e=global.$_$session;let t=i.initialSpecId();function c(){return e!==global.$_$session}const u=[];this.jasmineDone=function(){c()||(global.$_$initialSpecId=t+1)},this.jasmineStarted=function(){c()||i.started({total:"unknown number of"})},this.suiteStarted=function(e){c()||u.push(e.description)},this.suiteDone=function(){c()||u.pop()},this.specStarted=function(e){c()||(e._id=++t,i.specStart(e._id,e.fullName,e._testFile,[...u.slice(),e.description]),e._time=(new i._Date).getTime())},this.specDone=function(e){if(!c()){var t=i.specEnd(),r="passed"===e.status,s="disabled"===e.status||"pending"===e.status||"todo"===e.status,a=s?"pending"===e.status?"skipped":"todo"===e.status?"todo":"disabled"===e.status?"disabled":"executed":"executed",o={id:e._id,timeRange:t,name:e.description,suite:u.slice(),status:a,time:s?0:(new i._Date).getTime()-e._time,log:[],testFile:e._testFile};if(!r&&!s){var n=e.failedExpectations;for(let e=0;e<n.length;e++){var l=n[e];l.error&&(l.message=compactErrorMessage(l.message),l.error.matcherResult?(l.matcherName=l.error.matcherResult.name,l.actual=l.error.matcherResult.actual,l.expected=l.error.matcherResult.expected):(l.showDiff=l.error.showDiff,l.actual=l.error.actual,l.expected=l.error.expected)),l.showDiff=l.showDiff||"toEqual"===l.matcherName||"toStrictEqual"===l.matcherName||"toBe"===l.matcherName||"toMatchSnapshot"===l.matcherName||"toMatchInlineSnapshot"===l.matcherName||"toThrowErrorMatchingSnapshot"===l.matcherName,o.log.push(i.setAssertionData(l,{message:l.message,stack:l.stack}))}}o.log.length||delete o.log,i.result(o)}}};tracer.JasmineReporter=JasmineReporter,tracer.CircusReporter=CircusReporter;class WallabyRunner{constructor(e){this._sessionId=e,this._runComplete=!1}onRunStart(){}onTestStart(){}isActive(){return this._sessionId===global.$_$session}getLastError(){return this._error}_setError(e){this._error=e}completeRun(e){!this._runComplete&&this.isActive()&&(this._runComplete=!0,tracer.resetEnvGlobal(),tracer.complete(e))}onTestResult(e,t){delete t.console,delete t.failureMessage,t.testExecError&&this.isActive()&&(tracer.reportGlobalErrorObject(Object.assign(Object.assign({},t.testExecError),{message:t.testExecError.message,stack:t.testExecError.stack,testFilePath:t.testFilePath})),this.completeRun())}onRunComplete(e,t){!tracer.canUpdateSnapshots()&&t&&t.testResults&&t.testResults.forEach&&t.testResults.forEach(e=>{var t;e&&e.snapshot&&e.snapshot.unchecked&&(t=`${e.snapshot.unchecked} snapshot${1<e.snapshot.unchecked?"s":""} obsolete `+(e.snapshot.uncheckedKeys&&"\n\t"+e.snapshot.uncheckedKeys.join("\n\t")||""),tracer.reportGlobalErrorObject({message:t,stack:t+`
    at ${e.testFilePath}:1:0`,snapshot:!0,allowNotMappedStackLines:!0}))}),this.completeRun()}}const initializeJest=async()=>{var e=await utils.loadJest(localProjectRoot,global.wallaby._testFrameworkPath,global.wallaby._testConfigFile)||{};const{jestCLI:t,jestConfigLoader:r}=e;if(jestConfig=global.wallaby.customJestConfig||e.jestConfig,!t)throw new Error("Can not find jest-cli module");if(!jestConfig)throw new Error("Can not load jest config");if(!r)throw new Error("Can not find jest-config module");if(!(jestRuntime=utils.tryRequireModuleWithPathFrom(r.path,"jest-runtime",1)))throw new Error("Can not find Jest runtime module");if(!jestRuntime.module.createContext)throw new Error(`Can not find compatible Jest runtime module, module path: ${jestRuntime.path})`);e=utils.tryRequireModuleWithPathFrom(t.path,"@jest/core");if(!e)throw new Error("Can not find Jest core module");var s=utils.tryRequireModuleWithPathFrom(jestRuntime.path,"jest-resolve");if(s)try{clearDefaultResolverCache=s.module.clearDefaultResolverCache}catch(e){clearDefaultResolverCache=void 0}let a;prettyFormat=()=>a=a||utils.tryRequireModuleWithPathFrom(r.path,"pretty-format",1).module;const o=e.module.TestScheduler;if(!(createTestScheduler=o?e=>new o(e):e.module.createTestScheduler))throw new Error("Can not find Jest test scheduler module");var s=utils.tryRequireModuleWithPathFrom(e.path,"@jest/reporters"),n=(s?((n=(e,t)=>{e=e.prototype;e.log=e._write=t?()=>{}:function(e){e&&console.log("Jest: "+e)}})(s.module.BaseReporter),n(s.module.DefaultReporter),n(s.module.SummaryReporter,!0)):console.warn("Can not find Jest reporters module"),(jestRunGlobalHook=e.module.runGlobalHook?{module:e.module.runGlobalHook.default||e.module.runGlobalHook}:utils.tryRequireModuleWithPathFrom(t.path,"@jest/core/build/runGlobalHook"))||console.warn("Can not find Jest run global hook module"),utils.tryRequireModuleWithPathFrom(t.path,"@jest/console")),e=(n?((s=e=>{const r=e.prototype;["log","warn","error","dir","debug","info"].forEach(e=>{const t=r[e];t&&(r[e]=function(){return tracer._suppressConsoleLog||tracer["_"+e].apply(tracer,arguments),t.apply(this,arguments)})})})(n.module.BufferedConsole),s(n.module.CustomConsole),s(n.module.NullConsole)):console.warn("Can not find Jest console module"),jestConfig.configs=(jestConfig.configs||[]).filter(e=>"jest-runner"===e.runner||~utils.normalizePath(e.runner||"").indexOf("node_modules/jest-runner/")||"jest-runner-groups"===e.runner||~utils.normalizePath(e.runner||"").indexOf("node_modules/jest-runner-groups/")),jestConfig.configs.forEach(t=>{if(t.bail=0,t.notify=0,t.collectCoverage=!1,t.collectCoverageFrom=t.collectCoverageFrom||(jestConfig.globalConfig||{}).collectCoverageFrom,t.collectCoverageFrom&&t.collectCoverageFrom.length||(t.collectCoverageFrom=["**/*."+(1===t.moduleFileExtensions.length?t.moduleFileExtensions[0]:`{${t.moduleFileExtensions.join(",")}}`)]),t.coveragePathIgnorePatterns=t.coveragePathIgnorePatterns&&t.coveragePathIgnorePatterns.map(e=>new RegExp(e)),t.errorOnDeprecated=!1,t.setupFilesAfterEnv=t.setupFilesAfterEnv||[],t.transformIgnorePatterns=t.transformIgnorePatterns||[],-1!==t.testRunner.indexOf("jest-circus")){if(void 0!==process.env.WALLABY_JEST_CIRCUS&&(!process.env.WALLABY_JEST_CIRCUS||"false"===process.env.WALLABY_JEST_CIRCUS)){var e=t.testRunner.replace("jest-circus/runner","jest-jasmine2/build/index").replace("jest-circus\\runner","jest-jasmine2\\build\\index");try{t.testRunner=require.resolve("jest-jasmine2",{paths:[localProjectRoot]})}catch(e){t.testRunner=void 0}t.testRunner||(t.testRunner=e),t.setupFilesAfterEnv.unshift(jasmineInitializerPath),t.transformIgnorePatterns.push(utils.replacePathSepForRegex(path.join(path.basename(path.dirname(jasmineInitializerPath)),path.basename(jasmineInitializerPath))))}}else t.setupFilesAfterEnv.unshift(jasmineInitializerPath),t.transformIgnorePatterns.push(utils.replacePathSepForRegex(path.join(path.basename(path.dirname(jasmineInitializerPath)),path.basename(jasmineInitializerPath))));t.verbose=null,delete t.watchPlugins,delete t.testResultsProcessor,delete t.reporters;let a=!1;const o=path.join("ts-jest","dist","index.js");if(t.transform)try{t.transform.forEach(e=>{try{var t,r=e[1],s=e[2]=e[2]||{};r.endsWith(o)&&(t=require(path.join(path.dirname(path.dirname(r)),"package.json")),parseInt(t.version.split(".")[0],10)<29?a=!0:s&&!0!==s.diagnostics&&(s.diagnostics=!1))}catch(e){}})}catch(e){}if(a&&(t.globals=t.globals||{},t.globals["ts-jest"]=t.globals["ts-jest"]||{},!0!==t.globals["ts-jest"].diagnostics)&&(t.globals["ts-jest"].diagnostics=!1),t.resolver){var e=path.join("node_modules","@nrwl","jest","plugins","resolver.js"),r=path.join("node_modules","@nx","jest","plugins","resolver.js");if(t.resolver.endsWith(e)||t.resolver.endsWith(r)){var e=path.dirname(path.dirname(path.dirname(path.dirname(path.dirname(t.resolver))))),r=path.join(e,"angular.json"),s=path.join(e,"workspace.json"),s=fs.existsSync(r)?r:fs.existsSync(s)?s:void 0;if(s&&fs.statSync(s)){const c=path.relative(e,t.rootDir).replace(/\\/,"/");try{const u=JSON.parse(fs.readFileSync(s).toString());var n,l,i=Object.keys(u.projects).map(e=>Object.assign({},u.projects[e])).filter(e=>e.root===c).filter(e=>e.architect&&e.architect.test&&("@nrwl/jest:jest"===e.architect.test.builder||"@nx/jest:jest"===e.architect.test.builder)).map(e=>e.architect.test.options);1===i.length&&(n=i[0].tsConfig,l=i[0].setupFile,n&&(t.globals["ts-jest"].tsConfig="<rootDir>/"+path.relative(c,n)),l&&t.setupFilesAfterEnv.push(path.resolve(e,l)),t.globals["ts-jest"].stringifyContentPathRegex="\\.html$",s===r)&&(utils.tryRequireModuleWithPathFrom(localProjectRoot,"jest-preset-angular/InlineHtmlStripStylesTransformer")?t.globals["ts-jest"].astTransformers=["jest-preset-angular/InlineHtmlStripStylesTransformer"]:utils.tryRequireModuleWithPathFrom(localProjectRoot,"jest-preset-angular/build/InlineFilesTransformer")&&(t.globals["ts-jest"].astTransformers=["jest-preset-angular/build/InlineFilesTransformer","jest-preset-angular/build/StripStylesTransformer"]))}catch(e){}}}}}),jestConfig.globalConfig);e.notify=!1,e.bail=0,e.collectCoverage=!1,e.detectLeaks=!1,e.detectOpenHandles=!1,e.errorOnDeprecated=!1,e.json=!1,e.maxWorkers=1,e.useStderr=!1,e.watch=!1,e.verbose=null,process.env.NO_WATCHMAN&&(e.watchman=!1),delete e.findRelatedTests,delete e.listTests,delete e.forceExit,delete e.onlyChanged,delete e.onlyFailures,delete e.outputFile,delete e.passWithNoTests,delete e.watchAll,delete e.watchPlugins,delete e.testResultsProcessor,delete e.reporters,delete e.workerIdleMemoryLimit};let testRunner,testFiles,testFilesByPath,testContextByTestFilePath=new Map,testConfigByTestFilePath=new Map,testContextByConfig=new Map;class WallabyWatcher{constructor(){this.changeCallbacks=[],this._isInterrupted=!1}interrupt(){this._isInterrupted=!0,this.onChange({interrupted:!0})}setState(){}isWatchMode(){return!0}isInterrupted(){return this._isInterrupted}on(e,t){"change"===e&&this.changeCallbacks.push(t)}onChange(t){this.changeCallbacks.forEach(e=>{e(t)})}}let wallabyWatcher;const configure=async r=>{var e=global.$_$session;if(testRunner){jestConfig.globalConfig.updateSnapshot=tracer.canUpdateSnapshots()?"all":process.env.CI?"none":"new";const t=Object.assign(Object.assign({},jestConfig.globalConfig),{$_$session:global.$_$session});return testRunner=await createTestScheduler(t,{changedFiles:[],sourcesRelatedToTestsInChangedFiles:[]})}if(await initializeJest(),r&&jestConfig.configs.forEach(t=>{Object.keys(r).forEach(e=>{"bail"!==e&&"notify"!==e&&"collectCoverage"!==e&&"errorOnDeprecated"!==e&&"testRunner"!==e&&"verbose"!==e&&"watchPlugins"!==e&&(t[e]="setupFilesAfterEnv"===e||"transformIgnorePatterns"===e?t[e].concat(r[e]):r[e])})}),testContextByTestFilePath=new Map,testConfigByTestFilePath=new Map,e===global.$_$session){jestConfig.globalConfig.updateSnapshot=tracer.canUpdateSnapshots()?"all":process.env.CI?"none":"new";const t=Object.assign(Object.assign({},jestConfig.globalConfig),{$_$session:global.$_$session});return testRunner=await createTestScheduler(t,{changedFiles:[],sourcesRelatedToTestsInChangedFiles:[]})}},getTestData=async t=>{var a=[];for(let e=0;e<t.length;e++){let s=t[e];var r=testContextByTestFilePath.get(s);if(r)a.push({path:s,context:r});else{let r=testConfigByTestFilePath.get(s);r||(r=1===jestConfig.configs.length?jestConfig.configs[0]:(jestConfig.configs.filter(e=>{if(e.testMatch&&e.testMatch.length){if(!e.testMatch.some(e=>utils.pathMatchesPattern(s,e,{micromatch:!0})))return!1}else if(e.testRegex&&e.testRegex.length&&!e.testRegex.some(e=>new RegExp(e).test(s)))return!1;return!0}).reduce((e,t)=>{s=s&&s.normalize();var r=[t.rootDir||"",...t.roots],r=Math.max(...r.map(e=>s.replace(e.normalize(),"").length));return!e||e.relativePathLength>r?{config:t,relativePathLength:r}:e},void 0)||{config:jestConfig.configs[0]}).config,testConfigByTestFilePath.set(s,r)),testContextByConfig.has(r)||testContextByConfig.set(r,jestRuntime.module.createContext(r,{maxWorkers:jestConfig.globalConfig.maxWorkers,watchman:jestConfig.globalConfig.watchman})),a.push(new Promise(async e=>{var t=await testContextByConfig.get(r);testContextByTestFilePath.set(s,t),e({path:s,context:t})}))}}return Promise.all(a)},globalSetupTeardown=async(t,e)=>{let r={};try{try{global.wallaby.processEnv||(global.wallaby.processEnv=JSON.parse(JSON.stringify(process.env))),r=global.wallaby.processEnv}catch(e){return tracer.reportGlobalError("Failed to serialize existing process.env: "+(e&&e.message||"")),void t.completeRun()}await jestRunGlobalHook.module({allTests:e,globalConfig:jestConfig.globalConfig,moduleName:"globalSetup"})}catch(e){return tracer.reportGlobalError("Failed to run jest globalSetup: "+(e&&e.message||"")),void t.completeRun()}let s={};try{const n=JSON.parse(JSON.stringify(process.env));var a=Object.keys(n).filter(e=>void 0===r[e]||r[e]!==n[e]).map(e=>({variable:e,value:n[e]})),o=Object.keys(r).filter(e=>void 0===n[e]);s={updates:a,deletions:o}}catch(e){return tracer.reportGlobalError("Failed to serialize process.env: "+(e&&e.message||"")),void t.completeRun()}tracer.globalSetupComplete(s),global.wallaby.teardown=async()=>{try{await jestRunGlobalHook.module({allTests:e,globalConfig:jestConfig.globalConfig,moduleName:"globalTeardown"}),t.completeRun()}catch(e){tracer.reportGlobalError("Failed to run jest globalTeardown: "+(e&&e.message||"")),t.completeRun()}}},getFileData=(tracer.start(async()=>{var e,t;try{normalizedProjectCacheDir=normalizedProjectCacheDir||utils.normalizePath(global.wallaby.projectCacheDir),normalizedLocalProjectDir=normalizedLocalProjectDir||utils.normalizePath(global.wallaby.localProjectDir),testFilesByPath=void 0;var r=global.$_$session,s=new WallabyRunner(r),a=await configure();if(a&&s.isActive()){if(clearDefaultResolverCache)try{clearDefaultResolverCache()}catch(e){}a.removeReporter(WallabyRunner),null!=(e=a._dispatcher)&&e._reporters?null!=(t=a._dispatcher)&&t._reporters.unshift(s):a.addReporter(s);var o=await getTestData(testFiles);if(s.isActive())if(global.wallaby.runGlobals)await globalSetupTeardown(s,o);else try{s.isActive()&&(tracer.debugLog("Scheduling Jest Test Run ("+r+"): "+(new Date).toISOString()),null!==wallabyWatcher&&void 0!==wallabyWatcher&&wallabyWatcher.interrupt(),wallabyWatcher=new WallabyWatcher,await a.scheduleTests(o,wallabyWatcher))}catch(e){tracer.debugLog("Jest Test Error: "+(new Date).toISOString()),e&&e.stack&&(console.error(e.stack),tracer._sendRunnerError(e))}finally{handleUncaughtException(),tracer.debugLog(`Jest Test Run Complete (${r})${s.isActive()?"":" - INACTIVE"}: `+(new Date).toISOString()),s.completeRun()}}}catch(e){tracer.reportGlobalError("Failed to initialize wallaby jest.\n"+(e&&e.message||"")+"\n"+(e&&e.stack||""))}}),e=>{let t=utils.normalizePath(e).replace(normalizedLocalProjectDir,"").replace(normalizedProjectCacheDir,"");return"/"===t[0]&&(t=t.substr(1)),tracer._filePathToFileData[t]}),initializeTestsByFilePath=function(){testFilesByPath||(testFilesByPath={},global.$_$testFiles.forEach(function(e){testFilesByPath[e.path]=e}))},readFileSync=(tracer._fileCacheKey=t=>{var t=getFileData(t);if(t){let e=`${t.path}_${workerId}_${t.id}_`+t.ts;return t.childFilePath&&(t=getFileData(t.childFilePath))&&(e+=`_${t.id}_`+t.ts),e}},tracer._fileId=e=>{e=getFileData(e);if(e)return e.id},tracer._readFileSync=e=>fs.readFileSync(e),tracer._remapInlineSnapshots=e=>{initializeTestsByFilePath(),e.forEach(e=>{var t;e.frame&&(t=testFilesByPath[path.normalize(e.frame.file)])&&t.lineMap&&(e.frame.line=utils.getOriginalLineByGeneratedLine(t.lineMap,e.frame.line,e.frame.column)||e.frame.line,e.frame.column=1)})},tracer._matchSnapshot=({key:e,snapshotPath:t})=>{var r,s;tracer._expectedMatchSnapshotCall&&([r,s]=tracer._expectedMatchSnapshotCall,delete tracer._expectedMatchSnapshotCall,tracer._matchSnapshotCalls||(tracer._matchSnapshotCalls=[]),tracer._matchSnapshotCalls.push({fileId:r,snapshotCallRangeId:s,snapshotKey:e,snapshotPath:utils.normalizePath(path.relative(localProjectRoot,t))}))},tracer._beforeMatchSnapshot=(e,t)=>{tracer._expectedMatchSnapshotCall=[e,t]},tracer._readCodeCacheFile=(e,t,r,s)=>{e=getFileData(e);if(e){if(e.runnerExistingCachePath=t+".wallaby",e.useRunnerCache)return r(t);s=s(e.runnerExistingCachePath);if(s)try{e.runnerExistingCache=JSON.parse(s)}catch(e){}return null}return r(t)},fs.readFileSync),writeFileSync=(fs.readFileSync=function(e){var t;return"string"==typeof e&&(t=getFileData(e))&&t.inOriginalFilesCache&&(arguments[0]=path.join(originalCacheRoot,t.path)),readFileSync.apply(this,arguments)},fs.writeFileSync);fs.writeFileSync=function(e,t){var r,s,a;return e.endsWith(".snap")||!(r=getFileData(e))||-1===(s=(new Error).stack.toLowerCase()).indexOf("jest-snapshot")||-1===s.indexOf("inline")?writeFileSync.apply(this,arguments):(s=r.inOriginalFilesCache?path.join(originalCacheRoot,r.path):e,s=readFileSync(s).toString(),a=t.toString(),void tracer.sendFileChange({id:r.id,oldContent:s,newContent:a}))},tracer._extendJestTransformer=function(e,t){e=getFileData(e);if(!e||!e.instrument)return t;e=l=>{l.transformer&&(l.getCacheKey=l.transformer.getCacheKey,l.process=l.transformer.process,l.getCacheKeyAsync=l.transformer.getCacheKeyAsync,l.processAsync=l.transformer.processAsync),l.getCacheKey||l.getCacheKeyAsync||(l.getCacheKey=(e,t,r,s)=>("string"!=typeof r&&(r=(s=r).configString),crypto.createHash("md5").update(e).update(r).update(s&&s.instrument?"instrument":"").update(t).digest("hex")));function a(e,t,r,s,a){if(t=getFileData(t))if(a+="W"+t.id,t.logMarkers&&(a+=crypto.createHash("md5").update(t.logMarkers.sort((e,t)=>e.id.localeCompare(t.id)).map(e=>e.id).join(",")).digest("hex")),t.childFilePath)try{var o,n=getFileData(t.childFilePath);n?(o=fs.readFileSync(t.childFilePath),a+=crypto.createHash("md5").update(o).digest("hex")+n.id,t.useRunnerCache=n.runnerCacheKey===a,n.runnerCacheKey=a):(a="",t.useRunnerCache=!1)}catch(e){a="",t.useRunnerCache=!1}else t.useRunnerCache=t.runnerCacheKey===a,t.runnerCacheKey=a;return a}if(l.getCacheKey&&!l.getCacheKey._wallabyExtended){const o=l.getCacheKey;l.getCacheKey=function(e,t,r,s){e=o.call(l,e,t,r,s);return a(0,t,0,0,e)},l.getCacheKey._wallabyExtended=!0}if(l.getCacheKeyAsync&&!l.getCacheKeyAsync._wallabyExtended){const n=l.getCacheKeyAsync;l.getCacheKeyAsync=async function(e,t,r,s){e=await n.call(l,e,t,r,s);return a(0,t,0,0,e)},l.getCacheKeyAsync._wallabyExtended=!0}function i(s,a,o,e,n){o=o.config||o,n.runnerExistingCache&&(n.code=n.runnerExistingCache.code,n.map=n.runnerExistingCache.map);let l=!0;n&&null===n.code&&(n.code=s,l=!1);let i;n&&n.scriptSrc&&((i=getFileData(a))&&(a=path.join(a,"..",n.scriptSrc)),delete n.scriptSrc);var t,r,c=getFileData(a);if(c&&!global.wallaby.runGlobals&&(r=a,s=o,(t=c).test||!!t.instrument&&!(s.coveragePathIgnorePatterns||[]).some(e=>utils.pathMatchesPattern(r,e,{absolute:!0}))&&".node"!==path.extname(r)&&".json"!==path.extname(r)&&!s.collectCoverageFrom.some(e=>"!"===e[0]&&!utils.pathMatchesPattern(t.path,e,{micromatch:!0}))&&s.collectCoverageFrom.some(e=>"!"!==e[0]&&utils.pathMatchesPattern(t.path,e,{micromatch:!0})))){a=c.id;if("string"==typeof n?n={code:n,map:utils.getSourceMapFromCode(n)}:l&&"string"==typeof n.code&&!n.map&&(n.map=utils.getSourceMapFromCode(n.code)),"string"==typeof n.map&&(n.map=JSON.parse(n.map)),n.map&&n.map.constructor&&"SourceMapGenerator"===n.map.constructor.name&&(n.map=JSON.parse(n.map.toString())),!n.runnerExistingCache){let t;try{t=!!(o&&o.transform&&o.transform.find(e=>e[1]&&"string"==typeof e[1]&&e[1].includes("ts-jest")))}catch(e){t=!1}if(i&&i.runnerExistingCachePath&&!c.runnerExistingCachePath&&(c.runnerExistingCachePath=i.runnerExistingCachePath),t&&c.runnerExistingCachePath){fs.mkdirSync(path.dirname(c.runnerExistingCachePath),{recursive:!0});let t=0;for(;t<3;){try{writeFileAtomic(c.runnerExistingCachePath,JSON.stringify({code:n.code,map:n.map}))}catch(e){if("win32"!==process.platform||-4048!==e.errno)throw e;t++;continue}break}3===t&&tracer.debugLog("Warning: failed to write to cache: "+c.runnerExistingCachePath)}}s=n.code;let e=_.extend({},global.$_$tracer._hints);!c.test||e.allowIgnoringCoverageInTests||(e=_.omit(e,"ignoreCoverage","ignoreCoverageForFile")),e=_.omit(e,"testFileSelection");let r;n.map&&(c.changeStart||c.logMarkers&&c.logMarkers.length||c.extractedComments&&!c.extractedComments.isCoverageIgnored||c.test)&&(r=new utils.SourceMapConsumer(n.map));var o=utils.mapTextPosition(c.changeStart&&c.changePosition,r),u=c.logMarkers||[];let t;try{t=utils.instrument(s,{file:a,test:c.test,fileName:path.basename(c.path),testFileChangeStart:o,hints:e,recordValues:global.$_$tracer._autoConsoleLog,captureConsoleLog:global.$_$tracer._captureConsoleLog,recordMatchSnapshotRanges:!0,preserveComments:global.$_$tracer._preserveComments,logMarkers:u.map(e=>({originalRange:e.range,range:utils.mapOriginalRangeToTransformed(r,e.range),changeId:e.id,traceId:e.traceId,expanded:e.expanded,new:e.new,exp:e.exp,action:e.action,logpoint:e.logpoint,inlineLogpoint:e.inlineLogpoint})),extractedComments:utils.remapComments(c.extractedComments,s,r)})}catch(e){throw utils.formatInstrumentationError(e,s,c.path)}t.liveCommentLines&&n.map?(r=r||new utils.SourceMapConsumer(n.map),t.liveCommentLines=_.chain(t.liveCommentLines).map((e,t)=>({line:parseInt(t,10),column:e+1})).map(({line:e,column:t})=>utils.mapTransformedRangeToOriginal(r,[e,t,e,t])).filter(e=>e&&e.length).map(e=>e[0]).value()):t.liveCommentLines&&(t.liveCommentLines=Object.keys(t.liveCommentLines).map(e=>parseInt(e,10)).filter(e=>e).map(e=>e)),tracer.sendTransformedFile({id:a,parentFilePath:i&&i.path,transformed:_.omit(n,"code"),instrumented:_.omit(t,"code","map"),lineMap:utils.updateFileMap({},n.map?[n.map,t.map]:[t.map]),ts:c.ts,originalTs:c.originalTs,runnerCacheKey:c.runnerCacheKey,matchSnapshotRanges:t.matchSnapshotRanges&&t.matchSnapshotRanges.length&&r?t.matchSnapshotRanges.map(e=>utils.mapTransformedRangeToOriginal(r,e)):void 0,transformedTime:(new Date).toISOString(),runnerCacheHit:!!n.runnerExistingCache,usedLogpoints:u.filter(e=>e.logpoint).map(e=>e.id)}),t.numberOfFunctions!==c.numberOfFunctions&&delete t.testName,!c.test||global.$_$traceContext&&global.$_$traceContext.test||(t.testName&&c.allowedToRunSingleTestOnly?("*"===global.$_$tests&&(global.$_$tests={}),(global.$_$tests[":?"]=global.$_$tests[":?"]||{})[":"+t.testName]="*"):global.$_$tests&&global.$_$tests[":?"]&&(global.$_$tests="*"));for(var o=utils.docBlockComment(n.code).replace(/\r?\n|\r/g," "),p=(o&&(t.code=o+t.code),n.code=t.code,delete n.map,global.$_$coverage[a]||[]),m=global.$_$coverage[a]=[],d=0;d<t.ranges.length;d++)m[d]=p[d]||{};n.wallaby=!0}return n}if(l.process&&!l.process._wallabyExtended){const process=l.process;l.process=function(e,t,r,s){var a=getFileData(t);let o,n;return a&&a.runnerExistingCache?(o={runnerExistingCache:a.runnerExistingCache},delete a.runnerExistingCache):(o=process.call(l,e,t,r,s),n=o.wallaby),delete o.wallaby,n?o:i(e,t,r,0,o)},l.process._wallabyExtended=!0}if(l.processAsync&&!l.processAsync._wallabyExtended){const c=l.processAsync;l.processAsync=async function(e,t,r,s){var a=getFileData(t);let o,n;return a&&a.runnerExistingCache?(o={runnerExistingCache:a.runnerExistingCache},delete a.runnerExistingCache):(o=await c.call(l,e,t,r,s),n=o.wallaby),delete o.wallaby,n?o:i(e,t,r,0,o)},l.processAsync._wallabyExtended=!0}return l._wallabyExtended=!0,l.transformer=l.transformer||{},l.transformer.getCacheKey=l.getCacheKey,l.transformer.process=l.process,l.transformer.getCacheKeyAsync=l.getCacheKeyAsync,l.transformer.processAsync=l.processAsync,l};return t?t._wallabyExtended?t:e(t):e({getCacheKey(e,t,r,s){return"string"!=typeof r&&(r=(s=r).configString),crypto.createHash("md5").update(e).update(r).update(s&&s.instrument?"instrument":"").update(t).digest("hex")},process(e,t,r,s){return{code:null,map:null}}})},module.exports={init:function(e){return testFiles=e,{configure:function(e){testRunner||configure(e).catch(e=>console.error("Error while trying to configure jest: "+(e&&e.message||"")))}}}};